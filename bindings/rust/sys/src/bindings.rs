/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uc_struct {
    _unused: [u8; 0],
}
pub type uc_engine = uc_struct;
pub type uc_hook = usize;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum M68kCpuModel {
    M5206 = 0,
    M68000 = 1,
    M68020 = 2,
    M68030 = 3,
    M68040 = 4,
    M68060 = 5,
    M5208 = 6,
    CFV4E = 7,
    ANY = 8,
    ENDING = 9,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum RegisterM68K {
    INVALID = 0,
    A0 = 1,
    A1 = 2,
    A2 = 3,
    A3 = 4,
    A4 = 5,
    A5 = 6,
    A6 = 7,
    A7 = 8,
    D0 = 9,
    D1 = 10,
    D2 = 11,
    D3 = 12,
    D4 = 13,
    D5 = 14,
    D6 = 15,
    D7 = 16,
    SR = 17,
    PC = 18,
    CR_SFC = 19,
    CR_DFC = 20,
    CR_VBR = 21,
    CR_CACR = 22,
    CR_TC = 23,
    CR_MMUSR = 24,
    CR_SRP = 25,
    CR_USP = 26,
    CR_MSP = 27,
    CR_ISP = 28,
    CR_URP = 29,
    CR_ITT0 = 30,
    CR_ITT1 = 31,
    CR_DTT0 = 32,
    CR_DTT1 = 33,
    ENDING = 34,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum X86CpuModel {
    QEMU64 = 0,
    PHENOM = 1,
    CORE2DUO = 2,
    KVM64 = 3,
    QEMU32 = 4,
    KVM32 = 5,
    COREDUO = 6,
    Model_486 = 7,
    PENTIUM = 8,
    PENTIUM2 = 9,
    PENTIUM3 = 10,
    ATHLON = 11,
    N270 = 12,
    CONROE = 13,
    PENRYN = 14,
    NEHALEM = 15,
    WESTMERE = 16,
    SANDYBRIDGE = 17,
    IVYBRIDGE = 18,
    HASWELL = 19,
    BROADWELL = 20,
    SKYLAKE_CLIENT = 21,
    SKYLAKE_SERVER = 22,
    CASCADELAKE_SERVER = 23,
    COOPERLAKE = 24,
    ICELAKE_CLIENT = 25,
    ICELAKE_SERVER = 26,
    DENVERTON = 27,
    SNOWRIDGE = 28,
    KNIGHTSMILL = 29,
    OPTERON_G1 = 30,
    OPTERON_G2 = 31,
    OPTERON_G3 = 32,
    OPTERON_G4 = 33,
    OPTERON_G5 = 34,
    EPYC = 35,
    DHYANA = 36,
    EPYC_ROME = 37,
    ENDING = 38,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct uc_x86_mmr {
    pub selector: u16,
    pub base: u64,
    pub limit: u32,
    pub flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct uc_x86_msr {
    pub rid: u32,
    pub value: u64,
}
pub type uc_cb_insn_syscall_t = ::core::option::Option<
    unsafe extern "C" fn(uc: *mut uc_struct, user_data: *mut ::core::ffi::c_void),
>;
pub type uc_cb_insn_cpuid_t = ::core::option::Option<
    unsafe extern "C" fn(
        uc: *mut uc_struct,
        user_data: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int,
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum RegisterX86 {
    INVALID = 0,
    AH = 1,
    AL = 2,
    AX = 3,
    BH = 4,
    BL = 5,
    BP = 6,
    BPL = 7,
    BX = 8,
    CH = 9,
    CL = 10,
    CS = 11,
    CX = 12,
    DH = 13,
    DI = 14,
    DIL = 15,
    DL = 16,
    DS = 17,
    DX = 18,
    EAX = 19,
    EBP = 20,
    EBX = 21,
    ECX = 22,
    EDI = 23,
    EDX = 24,
    EFLAGS = 25,
    EIP = 26,
    ES = 28,
    ESI = 29,
    ESP = 30,
    FPSW = 31,
    FS = 32,
    GS = 33,
    IP = 34,
    RAX = 35,
    RBP = 36,
    RBX = 37,
    RCX = 38,
    RDI = 39,
    RDX = 40,
    RIP = 41,
    RSI = 43,
    RSP = 44,
    SI = 45,
    SIL = 46,
    SP = 47,
    SPL = 48,
    SS = 49,
    CR0 = 50,
    CR1 = 51,
    CR2 = 52,
    CR3 = 53,
    CR4 = 54,
    CR8 = 58,
    DR0 = 66,
    DR1 = 67,
    DR2 = 68,
    DR3 = 69,
    DR4 = 70,
    DR5 = 71,
    DR6 = 72,
    DR7 = 73,
    FP0 = 82,
    FP1 = 83,
    FP2 = 84,
    FP3 = 85,
    FP4 = 86,
    FP5 = 87,
    FP6 = 88,
    FP7 = 89,
    K0 = 90,
    K1 = 91,
    K2 = 92,
    K3 = 93,
    K4 = 94,
    K5 = 95,
    K6 = 96,
    K7 = 97,
    MM0 = 98,
    MM1 = 99,
    MM2 = 100,
    MM3 = 101,
    MM4 = 102,
    MM5 = 103,
    MM6 = 104,
    MM7 = 105,
    R8 = 106,
    R9 = 107,
    R10 = 108,
    R11 = 109,
    R12 = 110,
    R13 = 111,
    R14 = 112,
    R15 = 113,
    ST0 = 114,
    ST1 = 115,
    ST2 = 116,
    ST3 = 117,
    ST4 = 118,
    ST5 = 119,
    ST6 = 120,
    ST7 = 121,
    XMM0 = 122,
    XMM1 = 123,
    XMM2 = 124,
    XMM3 = 125,
    XMM4 = 126,
    XMM5 = 127,
    XMM6 = 128,
    XMM7 = 129,
    XMM8 = 130,
    XMM9 = 131,
    XMM10 = 132,
    XMM11 = 133,
    XMM12 = 134,
    XMM13 = 135,
    XMM14 = 136,
    XMM15 = 137,
    XMM16 = 138,
    XMM17 = 139,
    XMM18 = 140,
    XMM19 = 141,
    XMM20 = 142,
    XMM21 = 143,
    XMM22 = 144,
    XMM23 = 145,
    XMM24 = 146,
    XMM25 = 147,
    XMM26 = 148,
    XMM27 = 149,
    XMM28 = 150,
    XMM29 = 151,
    XMM30 = 152,
    XMM31 = 153,
    YMM0 = 154,
    YMM1 = 155,
    YMM2 = 156,
    YMM3 = 157,
    YMM4 = 158,
    YMM5 = 159,
    YMM6 = 160,
    YMM7 = 161,
    YMM8 = 162,
    YMM9 = 163,
    YMM10 = 164,
    YMM11 = 165,
    YMM12 = 166,
    YMM13 = 167,
    YMM14 = 168,
    YMM15 = 169,
    YMM16 = 170,
    YMM17 = 171,
    YMM18 = 172,
    YMM19 = 173,
    YMM20 = 174,
    YMM21 = 175,
    YMM22 = 176,
    YMM23 = 177,
    YMM24 = 178,
    YMM25 = 179,
    YMM26 = 180,
    YMM27 = 181,
    YMM28 = 182,
    YMM29 = 183,
    YMM30 = 184,
    YMM31 = 185,
    ZMM0 = 186,
    ZMM1 = 187,
    ZMM2 = 188,
    ZMM3 = 189,
    ZMM4 = 190,
    ZMM5 = 191,
    ZMM6 = 192,
    ZMM7 = 193,
    ZMM8 = 194,
    ZMM9 = 195,
    ZMM10 = 196,
    ZMM11 = 197,
    ZMM12 = 198,
    ZMM13 = 199,
    ZMM14 = 200,
    ZMM15 = 201,
    ZMM16 = 202,
    ZMM17 = 203,
    ZMM18 = 204,
    ZMM19 = 205,
    ZMM20 = 206,
    ZMM21 = 207,
    ZMM22 = 208,
    ZMM23 = 209,
    ZMM24 = 210,
    ZMM25 = 211,
    ZMM26 = 212,
    ZMM27 = 213,
    ZMM28 = 214,
    ZMM29 = 215,
    ZMM30 = 216,
    ZMM31 = 217,
    R8B = 218,
    R9B = 219,
    R10B = 220,
    R11B = 221,
    R12B = 222,
    R13B = 223,
    R14B = 224,
    R15B = 225,
    R8D = 226,
    R9D = 227,
    R10D = 228,
    R11D = 229,
    R12D = 230,
    R13D = 231,
    R14D = 232,
    R15D = 233,
    R8W = 234,
    R9W = 235,
    R10W = 236,
    R11W = 237,
    R12W = 238,
    R13W = 239,
    R14W = 240,
    R15W = 241,
    IDTR = 242,
    GDTR = 243,
    LDTR = 244,
    TR = 245,
    FPCW = 246,
    FPTAG = 247,
    MSR = 248,
    MXCSR = 249,
    FS_BASE = 250,
    GS_BASE = 251,
    FLAGS = 252,
    RFLAGS = 253,
    FIP = 254,
    FCS = 255,
    FDP = 256,
    FDS = 257,
    FOP = 258,
    ENDING = 259,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum X86Insn {
    INVALID = 0,
    AAA = 1,
    AAD = 2,
    AAM = 3,
    AAS = 4,
    FABS = 5,
    ADC = 6,
    ADCX = 7,
    ADD = 8,
    ADDPD = 9,
    ADDPS = 10,
    ADDSD = 11,
    ADDSS = 12,
    ADDSUBPD = 13,
    ADDSUBPS = 14,
    FADD = 15,
    FIADD = 16,
    FADDP = 17,
    ADOX = 18,
    AESDECLAST = 19,
    AESDEC = 20,
    AESENCLAST = 21,
    AESENC = 22,
    AESIMC = 23,
    AESKEYGENASSIST = 24,
    AND = 25,
    ANDN = 26,
    ANDNPD = 27,
    ANDNPS = 28,
    ANDPD = 29,
    ANDPS = 30,
    ARPL = 31,
    BEXTR = 32,
    BLCFILL = 33,
    BLCI = 34,
    BLCIC = 35,
    BLCMSK = 36,
    BLCS = 37,
    BLENDPD = 38,
    BLENDPS = 39,
    BLENDVPD = 40,
    BLENDVPS = 41,
    BLSFILL = 42,
    BLSI = 43,
    BLSIC = 44,
    BLSMSK = 45,
    BLSR = 46,
    BOUND = 47,
    BSF = 48,
    BSR = 49,
    BSWAP = 50,
    BT = 51,
    BTC = 52,
    BTR = 53,
    BTS = 54,
    BZHI = 55,
    CALL = 56,
    CBW = 57,
    CDQ = 58,
    CDQE = 59,
    FCHS = 60,
    CLAC = 61,
    CLC = 62,
    CLD = 63,
    CLFLUSH = 64,
    CLFLUSHOPT = 65,
    CLGI = 66,
    CLI = 67,
    CLTS = 68,
    CLWB = 69,
    CMC = 70,
    CMOVA = 71,
    CMOVAE = 72,
    CMOVB = 73,
    CMOVBE = 74,
    FCMOVBE = 75,
    FCMOVB = 76,
    CMOVE = 77,
    FCMOVE = 78,
    CMOVG = 79,
    CMOVGE = 80,
    CMOVL = 81,
    CMOVLE = 82,
    FCMOVNBE = 83,
    FCMOVNB = 84,
    CMOVNE = 85,
    FCMOVNE = 86,
    CMOVNO = 87,
    CMOVNP = 88,
    FCMOVNU = 89,
    CMOVNS = 90,
    CMOVO = 91,
    CMOVP = 92,
    FCMOVU = 93,
    CMOVS = 94,
    CMP = 95,
    CMPPD = 96,
    CMPPS = 97,
    CMPSB = 98,
    CMPSD = 99,
    CMPSQ = 100,
    CMPSS = 101,
    CMPSW = 102,
    CMPXCHG16B = 103,
    CMPXCHG = 104,
    CMPXCHG8B = 105,
    COMISD = 106,
    COMISS = 107,
    FCOMP = 108,
    FCOMPI = 109,
    FCOMI = 110,
    FCOM = 111,
    FCOS = 112,
    CPUID = 113,
    CQO = 114,
    CRC32 = 115,
    CVTDQ2PD = 116,
    CVTDQ2PS = 117,
    CVTPD2DQ = 118,
    CVTPD2PS = 119,
    CVTPS2DQ = 120,
    CVTPS2PD = 121,
    CVTSD2SI = 122,
    CVTSD2SS = 123,
    CVTSI2SD = 124,
    CVTSI2SS = 125,
    CVTSS2SD = 126,
    CVTSS2SI = 127,
    CVTTPD2DQ = 128,
    CVTTPS2DQ = 129,
    CVTTSD2SI = 130,
    CVTTSS2SI = 131,
    CWD = 132,
    CWDE = 133,
    DAA = 134,
    DAS = 135,
    DATA16 = 136,
    DEC = 137,
    DIV = 138,
    DIVPD = 139,
    DIVPS = 140,
    FDIVR = 141,
    FIDIVR = 142,
    FDIVRP = 143,
    DIVSD = 144,
    DIVSS = 145,
    FDIV = 146,
    FIDIV = 147,
    FDIVP = 148,
    DPPD = 149,
    DPPS = 150,
    RET = 151,
    ENCLS = 152,
    ENCLU = 153,
    ENTER = 154,
    EXTRACTPS = 155,
    EXTRQ = 156,
    F2XM1 = 157,
    LCALL = 158,
    LJMP = 159,
    FBLD = 160,
    FBSTP = 161,
    FCOMPP = 162,
    FDECSTP = 163,
    FEMMS = 164,
    FFREE = 165,
    FICOM = 166,
    FICOMP = 167,
    FINCSTP = 168,
    FLDCW = 169,
    FLDENV = 170,
    FLDL2E = 171,
    FLDL2T = 172,
    FLDLG2 = 173,
    FLDLN2 = 174,
    FLDPI = 175,
    FNCLEX = 176,
    FNINIT = 177,
    FNOP = 178,
    FNSTCW = 179,
    FNSTSW = 180,
    FPATAN = 181,
    FPREM = 182,
    FPREM1 = 183,
    FPTAN = 184,
    FFREEP = 185,
    FRNDINT = 186,
    FRSTOR = 187,
    FNSAVE = 188,
    FSCALE = 189,
    FSETPM = 190,
    FSINCOS = 191,
    FNSTENV = 192,
    FXAM = 193,
    FXRSTOR = 194,
    FXRSTOR64 = 195,
    FXSAVE = 196,
    FXSAVE64 = 197,
    FXTRACT = 198,
    FYL2X = 199,
    FYL2XP1 = 200,
    MOVAPD = 201,
    MOVAPS = 202,
    ORPD = 203,
    ORPS = 204,
    VMOVAPD = 205,
    VMOVAPS = 206,
    XORPD = 207,
    XORPS = 208,
    GETSEC = 209,
    HADDPD = 210,
    HADDPS = 211,
    HLT = 212,
    HSUBPD = 213,
    HSUBPS = 214,
    IDIV = 215,
    FILD = 216,
    IMUL = 217,
    IN = 218,
    INC = 219,
    INSB = 220,
    INSERTPS = 221,
    INSERTQ = 222,
    INSD = 223,
    INSW = 224,
    INT = 225,
    INT1 = 226,
    INT3 = 227,
    INTO = 228,
    INVD = 229,
    INVEPT = 230,
    INVLPG = 231,
    INVLPGA = 232,
    INVPCID = 233,
    INVVPID = 234,
    IRET = 235,
    IRETD = 236,
    IRETQ = 237,
    FISTTP = 238,
    FIST = 239,
    FISTP = 240,
    UCOMISD = 241,
    UCOMISS = 242,
    VCOMISD = 243,
    VCOMISS = 244,
    VCVTSD2SS = 245,
    VCVTSI2SD = 246,
    VCVTSI2SS = 247,
    VCVTSS2SD = 248,
    VCVTTSD2SI = 249,
    VCVTTSD2USI = 250,
    VCVTTSS2SI = 251,
    VCVTTSS2USI = 252,
    VCVTUSI2SD = 253,
    VCVTUSI2SS = 254,
    VUCOMISD = 255,
    VUCOMISS = 256,
    JAE = 257,
    JA = 258,
    JBE = 259,
    JB = 260,
    JCXZ = 261,
    JECXZ = 262,
    JE = 263,
    JGE = 264,
    JG = 265,
    JLE = 266,
    JL = 267,
    JMP = 268,
    JNE = 269,
    JNO = 270,
    JNP = 271,
    JNS = 272,
    JO = 273,
    JP = 274,
    JRCXZ = 275,
    JS = 276,
    KANDB = 277,
    KANDD = 278,
    KANDNB = 279,
    KANDND = 280,
    KANDNQ = 281,
    KANDNW = 282,
    KANDQ = 283,
    KANDW = 284,
    KMOVB = 285,
    KMOVD = 286,
    KMOVQ = 287,
    KMOVW = 288,
    KNOTB = 289,
    KNOTD = 290,
    KNOTQ = 291,
    KNOTW = 292,
    KORB = 293,
    KORD = 294,
    KORQ = 295,
    KORTESTB = 296,
    KORTESTD = 297,
    KORTESTQ = 298,
    KORTESTW = 299,
    KORW = 300,
    KSHIFTLB = 301,
    KSHIFTLD = 302,
    KSHIFTLQ = 303,
    KSHIFTLW = 304,
    KSHIFTRB = 305,
    KSHIFTRD = 306,
    KSHIFTRQ = 307,
    KSHIFTRW = 308,
    KUNPCKBW = 309,
    KXNORB = 310,
    KXNORD = 311,
    KXNORQ = 312,
    KXNORW = 313,
    KXORB = 314,
    KXORD = 315,
    KXORQ = 316,
    KXORW = 317,
    LAHF = 318,
    LAR = 319,
    LDDQU = 320,
    LDMXCSR = 321,
    LDS = 322,
    FLDZ = 323,
    FLD1 = 324,
    FLD = 325,
    LEA = 326,
    LEAVE = 327,
    LES = 328,
    LFENCE = 329,
    LFS = 330,
    LGDT = 331,
    LGS = 332,
    LIDT = 333,
    LLDT = 334,
    LMSW = 335,
    OR = 336,
    SUB = 337,
    XOR = 338,
    LODSB = 339,
    LODSD = 340,
    LODSQ = 341,
    LODSW = 342,
    LOOP = 343,
    LOOPE = 344,
    LOOPNE = 345,
    RETF = 346,
    RETFQ = 347,
    LSL = 348,
    LSS = 349,
    LTR = 350,
    XADD = 351,
    LZCNT = 352,
    MASKMOVDQU = 353,
    MAXPD = 354,
    MAXPS = 355,
    MAXSD = 356,
    MAXSS = 357,
    MFENCE = 358,
    MINPD = 359,
    MINPS = 360,
    MINSD = 361,
    MINSS = 362,
    CVTPD2PI = 363,
    CVTPI2PD = 364,
    CVTPI2PS = 365,
    CVTPS2PI = 366,
    CVTTPD2PI = 367,
    CVTTPS2PI = 368,
    EMMS = 369,
    MASKMOVQ = 370,
    MOVD = 371,
    MOVDQ2Q = 372,
    MOVNTQ = 373,
    MOVQ2DQ = 374,
    MOVQ = 375,
    PABSB = 376,
    PABSD = 377,
    PABSW = 378,
    PACKSSDW = 379,
    PACKSSWB = 380,
    PACKUSWB = 381,
    PADDB = 382,
    PADDD = 383,
    PADDQ = 384,
    PADDSB = 385,
    PADDSW = 386,
    PADDUSB = 387,
    PADDUSW = 388,
    PADDW = 389,
    PALIGNR = 390,
    PANDN = 391,
    PAND = 392,
    PAVGB = 393,
    PAVGW = 394,
    PCMPEQB = 395,
    PCMPEQD = 396,
    PCMPEQW = 397,
    PCMPGTB = 398,
    PCMPGTD = 399,
    PCMPGTW = 400,
    PEXTRW = 401,
    PHADDSW = 402,
    PHADDW = 403,
    PHADDD = 404,
    PHSUBD = 405,
    PHSUBSW = 406,
    PHSUBW = 407,
    PINSRW = 408,
    PMADDUBSW = 409,
    PMADDWD = 410,
    PMAXSW = 411,
    PMAXUB = 412,
    PMINSW = 413,
    PMINUB = 414,
    PMOVMSKB = 415,
    PMULHRSW = 416,
    PMULHUW = 417,
    PMULHW = 418,
    PMULLW = 419,
    PMULUDQ = 420,
    POR = 421,
    PSADBW = 422,
    PSHUFB = 423,
    PSHUFW = 424,
    PSIGNB = 425,
    PSIGND = 426,
    PSIGNW = 427,
    PSLLD = 428,
    PSLLQ = 429,
    PSLLW = 430,
    PSRAD = 431,
    PSRAW = 432,
    PSRLD = 433,
    PSRLQ = 434,
    PSRLW = 435,
    PSUBB = 436,
    PSUBD = 437,
    PSUBQ = 438,
    PSUBSB = 439,
    PSUBSW = 440,
    PSUBUSB = 441,
    PSUBUSW = 442,
    PSUBW = 443,
    PUNPCKHBW = 444,
    PUNPCKHDQ = 445,
    PUNPCKHWD = 446,
    PUNPCKLBW = 447,
    PUNPCKLDQ = 448,
    PUNPCKLWD = 449,
    PXOR = 450,
    MONITOR = 451,
    MONTMUL = 452,
    MOV = 453,
    MOVABS = 454,
    MOVBE = 455,
    MOVDDUP = 456,
    MOVDQA = 457,
    MOVDQU = 458,
    MOVHLPS = 459,
    MOVHPD = 460,
    MOVHPS = 461,
    MOVLHPS = 462,
    MOVLPD = 463,
    MOVLPS = 464,
    MOVMSKPD = 465,
    MOVMSKPS = 466,
    MOVNTDQA = 467,
    MOVNTDQ = 468,
    MOVNTI = 469,
    MOVNTPD = 470,
    MOVNTPS = 471,
    MOVNTSD = 472,
    MOVNTSS = 473,
    MOVSB = 474,
    MOVSD = 475,
    MOVSHDUP = 476,
    MOVSLDUP = 477,
    MOVSQ = 478,
    MOVSS = 479,
    MOVSW = 480,
    MOVSX = 481,
    MOVSXD = 482,
    MOVUPD = 483,
    MOVUPS = 484,
    MOVZX = 485,
    MPSADBW = 486,
    MUL = 487,
    MULPD = 488,
    MULPS = 489,
    MULSD = 490,
    MULSS = 491,
    MULX = 492,
    FMUL = 493,
    FIMUL = 494,
    FMULP = 495,
    MWAIT = 496,
    NEG = 497,
    NOP = 498,
    NOT = 499,
    OUT = 500,
    OUTSB = 501,
    OUTSD = 502,
    OUTSW = 503,
    PACKUSDW = 504,
    PAUSE = 505,
    PAVGUSB = 506,
    PBLENDVB = 507,
    PBLENDW = 508,
    PCLMULQDQ = 509,
    PCMPEQQ = 510,
    PCMPESTRI = 511,
    PCMPESTRM = 512,
    PCMPGTQ = 513,
    PCMPISTRI = 514,
    PCMPISTRM = 515,
    PCOMMIT = 516,
    PDEP = 517,
    PEXT = 518,
    PEXTRB = 519,
    PEXTRD = 520,
    PEXTRQ = 521,
    PF2ID = 522,
    PF2IW = 523,
    PFACC = 524,
    PFADD = 525,
    PFCMPEQ = 526,
    PFCMPGE = 527,
    PFCMPGT = 528,
    PFMAX = 529,
    PFMIN = 530,
    PFMUL = 531,
    PFNACC = 532,
    PFPNACC = 533,
    PFRCPIT1 = 534,
    PFRCPIT2 = 535,
    PFRCP = 536,
    PFRSQIT1 = 537,
    PFRSQRT = 538,
    PFSUBR = 539,
    PFSUB = 540,
    PHMINPOSUW = 541,
    PI2FD = 542,
    PI2FW = 543,
    PINSRB = 544,
    PINSRD = 545,
    PINSRQ = 546,
    PMAXSB = 547,
    PMAXSD = 548,
    PMAXUD = 549,
    PMAXUW = 550,
    PMINSB = 551,
    PMINSD = 552,
    PMINUD = 553,
    PMINUW = 554,
    PMOVSXBD = 555,
    PMOVSXBQ = 556,
    PMOVSXBW = 557,
    PMOVSXDQ = 558,
    PMOVSXWD = 559,
    PMOVSXWQ = 560,
    PMOVZXBD = 561,
    PMOVZXBQ = 562,
    PMOVZXBW = 563,
    PMOVZXDQ = 564,
    PMOVZXWD = 565,
    PMOVZXWQ = 566,
    PMULDQ = 567,
    PMULHRW = 568,
    PMULLD = 569,
    POP = 570,
    POPAW = 571,
    POPAL = 572,
    POPCNT = 573,
    POPF = 574,
    POPFD = 575,
    POPFQ = 576,
    PREFETCH = 577,
    PREFETCHNTA = 578,
    PREFETCHT0 = 579,
    PREFETCHT1 = 580,
    PREFETCHT2 = 581,
    PREFETCHW = 582,
    PSHUFD = 583,
    PSHUFHW = 584,
    PSHUFLW = 585,
    PSLLDQ = 586,
    PSRLDQ = 587,
    PSWAPD = 588,
    PTEST = 589,
    PUNPCKHQDQ = 590,
    PUNPCKLQDQ = 591,
    PUSH = 592,
    PUSHAW = 593,
    PUSHAL = 594,
    PUSHF = 595,
    PUSHFD = 596,
    PUSHFQ = 597,
    RCL = 598,
    RCPPS = 599,
    RCPSS = 600,
    RCR = 601,
    RDFSBASE = 602,
    RDGSBASE = 603,
    RDMSR = 604,
    RDPMC = 605,
    RDRAND = 606,
    RDSEED = 607,
    RDTSC = 608,
    RDTSCP = 609,
    ROL = 610,
    ROR = 611,
    RORX = 612,
    ROUNDPD = 613,
    ROUNDPS = 614,
    ROUNDSD = 615,
    ROUNDSS = 616,
    RSM = 617,
    RSQRTPS = 618,
    RSQRTSS = 619,
    SAHF = 620,
    SAL = 621,
    SALC = 622,
    SAR = 623,
    SARX = 624,
    SBB = 625,
    SCASB = 626,
    SCASD = 627,
    SCASQ = 628,
    SCASW = 629,
    SETAE = 630,
    SETA = 631,
    SETBE = 632,
    SETB = 633,
    SETE = 634,
    SETGE = 635,
    SETG = 636,
    SETLE = 637,
    SETL = 638,
    SETNE = 639,
    SETNO = 640,
    SETNP = 641,
    SETNS = 642,
    SETO = 643,
    SETP = 644,
    SETS = 645,
    SFENCE = 646,
    SGDT = 647,
    SHA1MSG1 = 648,
    SHA1MSG2 = 649,
    SHA1NEXTE = 650,
    SHA1RNDS4 = 651,
    SHA256MSG1 = 652,
    SHA256MSG2 = 653,
    SHA256RNDS2 = 654,
    SHL = 655,
    SHLD = 656,
    SHLX = 657,
    SHR = 658,
    SHRD = 659,
    SHRX = 660,
    SHUFPD = 661,
    SHUFPS = 662,
    SIDT = 663,
    FSIN = 664,
    SKINIT = 665,
    SLDT = 666,
    SMSW = 667,
    SQRTPD = 668,
    SQRTPS = 669,
    SQRTSD = 670,
    SQRTSS = 671,
    FSQRT = 672,
    STAC = 673,
    STC = 674,
    STD = 675,
    STGI = 676,
    STI = 677,
    STMXCSR = 678,
    STOSB = 679,
    STOSD = 680,
    STOSQ = 681,
    STOSW = 682,
    STR = 683,
    FST = 684,
    FSTP = 685,
    FSTPNCE = 686,
    FXCH = 687,
    SUBPD = 688,
    SUBPS = 689,
    FSUBR = 690,
    FISUBR = 691,
    FSUBRP = 692,
    SUBSD = 693,
    SUBSS = 694,
    FSUB = 695,
    FISUB = 696,
    FSUBP = 697,
    SWAPGS = 698,
    SYSCALL = 699,
    SYSENTER = 700,
    SYSEXIT = 701,
    SYSRET = 702,
    T1MSKC = 703,
    TEST = 704,
    UD2 = 705,
    FTST = 706,
    TZCNT = 707,
    TZMSK = 708,
    FUCOMPI = 709,
    FUCOMI = 710,
    FUCOMPP = 711,
    FUCOMP = 712,
    FUCOM = 713,
    UD2B = 714,
    UNPCKHPD = 715,
    UNPCKHPS = 716,
    UNPCKLPD = 717,
    UNPCKLPS = 718,
    VADDPD = 719,
    VADDPS = 720,
    VADDSD = 721,
    VADDSS = 722,
    VADDSUBPD = 723,
    VADDSUBPS = 724,
    VAESDECLAST = 725,
    VAESDEC = 726,
    VAESENCLAST = 727,
    VAESENC = 728,
    VAESIMC = 729,
    VAESKEYGENASSIST = 730,
    VALIGND = 731,
    VALIGNQ = 732,
    VANDNPD = 733,
    VANDNPS = 734,
    VANDPD = 735,
    VANDPS = 736,
    VBLENDMPD = 737,
    VBLENDMPS = 738,
    VBLENDPD = 739,
    VBLENDPS = 740,
    VBLENDVPD = 741,
    VBLENDVPS = 742,
    VBROADCASTF128 = 743,
    VBROADCASTI32X4 = 744,
    VBROADCASTI64X4 = 745,
    VBROADCASTSD = 746,
    VBROADCASTSS = 747,
    VCMPPD = 748,
    VCMPPS = 749,
    VCMPSD = 750,
    VCMPSS = 751,
    VCOMPRESSPD = 752,
    VCOMPRESSPS = 753,
    VCVTDQ2PD = 754,
    VCVTDQ2PS = 755,
    VCVTPD2DQX = 756,
    VCVTPD2DQ = 757,
    VCVTPD2PSX = 758,
    VCVTPD2PS = 759,
    VCVTPD2UDQ = 760,
    VCVTPH2PS = 761,
    VCVTPS2DQ = 762,
    VCVTPS2PD = 763,
    VCVTPS2PH = 764,
    VCVTPS2UDQ = 765,
    VCVTSD2SI = 766,
    VCVTSD2USI = 767,
    VCVTSS2SI = 768,
    VCVTSS2USI = 769,
    VCVTTPD2DQX = 770,
    VCVTTPD2DQ = 771,
    VCVTTPD2UDQ = 772,
    VCVTTPS2DQ = 773,
    VCVTTPS2UDQ = 774,
    VCVTUDQ2PD = 775,
    VCVTUDQ2PS = 776,
    VDIVPD = 777,
    VDIVPS = 778,
    VDIVSD = 779,
    VDIVSS = 780,
    VDPPD = 781,
    VDPPS = 782,
    VERR = 783,
    VERW = 784,
    VEXP2PD = 785,
    VEXP2PS = 786,
    VEXPANDPD = 787,
    VEXPANDPS = 788,
    VEXTRACTF128 = 789,
    VEXTRACTF32X4 = 790,
    VEXTRACTF64X4 = 791,
    VEXTRACTI128 = 792,
    VEXTRACTI32X4 = 793,
    VEXTRACTI64X4 = 794,
    VEXTRACTPS = 795,
    VFMADD132PD = 796,
    VFMADD132PS = 797,
    VFMADDPD = 798,
    VFMADD213PD = 799,
    VFMADD231PD = 800,
    VFMADDPS = 801,
    VFMADD213PS = 802,
    VFMADD231PS = 803,
    VFMADDSD = 804,
    VFMADD213SD = 805,
    VFMADD132SD = 806,
    VFMADD231SD = 807,
    VFMADDSS = 808,
    VFMADD213SS = 809,
    VFMADD132SS = 810,
    VFMADD231SS = 811,
    VFMADDSUB132PD = 812,
    VFMADDSUB132PS = 813,
    VFMADDSUBPD = 814,
    VFMADDSUB213PD = 815,
    VFMADDSUB231PD = 816,
    VFMADDSUBPS = 817,
    VFMADDSUB213PS = 818,
    VFMADDSUB231PS = 819,
    VFMSUB132PD = 820,
    VFMSUB132PS = 821,
    VFMSUBADD132PD = 822,
    VFMSUBADD132PS = 823,
    VFMSUBADDPD = 824,
    VFMSUBADD213PD = 825,
    VFMSUBADD231PD = 826,
    VFMSUBADDPS = 827,
    VFMSUBADD213PS = 828,
    VFMSUBADD231PS = 829,
    VFMSUBPD = 830,
    VFMSUB213PD = 831,
    VFMSUB231PD = 832,
    VFMSUBPS = 833,
    VFMSUB213PS = 834,
    VFMSUB231PS = 835,
    VFMSUBSD = 836,
    VFMSUB213SD = 837,
    VFMSUB132SD = 838,
    VFMSUB231SD = 839,
    VFMSUBSS = 840,
    VFMSUB213SS = 841,
    VFMSUB132SS = 842,
    VFMSUB231SS = 843,
    VFNMADD132PD = 844,
    VFNMADD132PS = 845,
    VFNMADDPD = 846,
    VFNMADD213PD = 847,
    VFNMADD231PD = 848,
    VFNMADDPS = 849,
    VFNMADD213PS = 850,
    VFNMADD231PS = 851,
    VFNMADDSD = 852,
    VFNMADD213SD = 853,
    VFNMADD132SD = 854,
    VFNMADD231SD = 855,
    VFNMADDSS = 856,
    VFNMADD213SS = 857,
    VFNMADD132SS = 858,
    VFNMADD231SS = 859,
    VFNMSUB132PD = 860,
    VFNMSUB132PS = 861,
    VFNMSUBPD = 862,
    VFNMSUB213PD = 863,
    VFNMSUB231PD = 864,
    VFNMSUBPS = 865,
    VFNMSUB213PS = 866,
    VFNMSUB231PS = 867,
    VFNMSUBSD = 868,
    VFNMSUB213SD = 869,
    VFNMSUB132SD = 870,
    VFNMSUB231SD = 871,
    VFNMSUBSS = 872,
    VFNMSUB213SS = 873,
    VFNMSUB132SS = 874,
    VFNMSUB231SS = 875,
    VFRCZPD = 876,
    VFRCZPS = 877,
    VFRCZSD = 878,
    VFRCZSS = 879,
    VORPD = 880,
    VORPS = 881,
    VXORPD = 882,
    VXORPS = 883,
    VGATHERDPD = 884,
    VGATHERDPS = 885,
    VGATHERPF0DPD = 886,
    VGATHERPF0DPS = 887,
    VGATHERPF0QPD = 888,
    VGATHERPF0QPS = 889,
    VGATHERPF1DPD = 890,
    VGATHERPF1DPS = 891,
    VGATHERPF1QPD = 892,
    VGATHERPF1QPS = 893,
    VGATHERQPD = 894,
    VGATHERQPS = 895,
    VHADDPD = 896,
    VHADDPS = 897,
    VHSUBPD = 898,
    VHSUBPS = 899,
    VINSERTF128 = 900,
    VINSERTF32X4 = 901,
    VINSERTF32X8 = 902,
    VINSERTF64X2 = 903,
    VINSERTF64X4 = 904,
    VINSERTI128 = 905,
    VINSERTI32X4 = 906,
    VINSERTI32X8 = 907,
    VINSERTI64X2 = 908,
    VINSERTI64X4 = 909,
    VINSERTPS = 910,
    VLDDQU = 911,
    VLDMXCSR = 912,
    VMASKMOVDQU = 913,
    VMASKMOVPD = 914,
    VMASKMOVPS = 915,
    VMAXPD = 916,
    VMAXPS = 917,
    VMAXSD = 918,
    VMAXSS = 919,
    VMCALL = 920,
    VMCLEAR = 921,
    VMFUNC = 922,
    VMINPD = 923,
    VMINPS = 924,
    VMINSD = 925,
    VMINSS = 926,
    VMLAUNCH = 927,
    VMLOAD = 928,
    VMMCALL = 929,
    VMOVQ = 930,
    VMOVDDUP = 931,
    VMOVD = 932,
    VMOVDQA32 = 933,
    VMOVDQA64 = 934,
    VMOVDQA = 935,
    VMOVDQU16 = 936,
    VMOVDQU32 = 937,
    VMOVDQU64 = 938,
    VMOVDQU8 = 939,
    VMOVDQU = 940,
    VMOVHLPS = 941,
    VMOVHPD = 942,
    VMOVHPS = 943,
    VMOVLHPS = 944,
    VMOVLPD = 945,
    VMOVLPS = 946,
    VMOVMSKPD = 947,
    VMOVMSKPS = 948,
    VMOVNTDQA = 949,
    VMOVNTDQ = 950,
    VMOVNTPD = 951,
    VMOVNTPS = 952,
    VMOVSD = 953,
    VMOVSHDUP = 954,
    VMOVSLDUP = 955,
    VMOVSS = 956,
    VMOVUPD = 957,
    VMOVUPS = 958,
    VMPSADBW = 959,
    VMPTRLD = 960,
    VMPTRST = 961,
    VMREAD = 962,
    VMRESUME = 963,
    VMRUN = 964,
    VMSAVE = 965,
    VMULPD = 966,
    VMULPS = 967,
    VMULSD = 968,
    VMULSS = 969,
    VMWRITE = 970,
    VMXOFF = 971,
    VMXON = 972,
    VPABSB = 973,
    VPABSD = 974,
    VPABSQ = 975,
    VPABSW = 976,
    VPACKSSDW = 977,
    VPACKSSWB = 978,
    VPACKUSDW = 979,
    VPACKUSWB = 980,
    VPADDB = 981,
    VPADDD = 982,
    VPADDQ = 983,
    VPADDSB = 984,
    VPADDSW = 985,
    VPADDUSB = 986,
    VPADDUSW = 987,
    VPADDW = 988,
    VPALIGNR = 989,
    VPANDD = 990,
    VPANDND = 991,
    VPANDNQ = 992,
    VPANDN = 993,
    VPANDQ = 994,
    VPAND = 995,
    VPAVGB = 996,
    VPAVGW = 997,
    VPBLENDD = 998,
    VPBLENDMB = 999,
    VPBLENDMD = 1000,
    VPBLENDMQ = 1001,
    VPBLENDMW = 1002,
    VPBLENDVB = 1003,
    VPBLENDW = 1004,
    VPBROADCASTB = 1005,
    VPBROADCASTD = 1006,
    VPBROADCASTMB2Q = 1007,
    VPBROADCASTMW2D = 1008,
    VPBROADCASTQ = 1009,
    VPBROADCASTW = 1010,
    VPCLMULQDQ = 1011,
    VPCMOV = 1012,
    VPCMPB = 1013,
    VPCMPD = 1014,
    VPCMPEQB = 1015,
    VPCMPEQD = 1016,
    VPCMPEQQ = 1017,
    VPCMPEQW = 1018,
    VPCMPESTRI = 1019,
    VPCMPESTRM = 1020,
    VPCMPGTB = 1021,
    VPCMPGTD = 1022,
    VPCMPGTQ = 1023,
    VPCMPGTW = 1024,
    VPCMPISTRI = 1025,
    VPCMPISTRM = 1026,
    VPCMPQ = 1027,
    VPCMPUB = 1028,
    VPCMPUD = 1029,
    VPCMPUQ = 1030,
    VPCMPUW = 1031,
    VPCMPW = 1032,
    VPCOMB = 1033,
    VPCOMD = 1034,
    VPCOMPRESSD = 1035,
    VPCOMPRESSQ = 1036,
    VPCOMQ = 1037,
    VPCOMUB = 1038,
    VPCOMUD = 1039,
    VPCOMUQ = 1040,
    VPCOMUW = 1041,
    VPCOMW = 1042,
    VPCONFLICTD = 1043,
    VPCONFLICTQ = 1044,
    VPERM2F128 = 1045,
    VPERM2I128 = 1046,
    VPERMD = 1047,
    VPERMI2D = 1048,
    VPERMI2PD = 1049,
    VPERMI2PS = 1050,
    VPERMI2Q = 1051,
    VPERMIL2PD = 1052,
    VPERMIL2PS = 1053,
    VPERMILPD = 1054,
    VPERMILPS = 1055,
    VPERMPD = 1056,
    VPERMPS = 1057,
    VPERMQ = 1058,
    VPERMT2D = 1059,
    VPERMT2PD = 1060,
    VPERMT2PS = 1061,
    VPERMT2Q = 1062,
    VPEXPANDD = 1063,
    VPEXPANDQ = 1064,
    VPEXTRB = 1065,
    VPEXTRD = 1066,
    VPEXTRQ = 1067,
    VPEXTRW = 1068,
    VPGATHERDD = 1069,
    VPGATHERDQ = 1070,
    VPGATHERQD = 1071,
    VPGATHERQQ = 1072,
    VPHADDBD = 1073,
    VPHADDBQ = 1074,
    VPHADDBW = 1075,
    VPHADDDQ = 1076,
    VPHADDD = 1077,
    VPHADDSW = 1078,
    VPHADDUBD = 1079,
    VPHADDUBQ = 1080,
    VPHADDUBW = 1081,
    VPHADDUDQ = 1082,
    VPHADDUWD = 1083,
    VPHADDUWQ = 1084,
    VPHADDWD = 1085,
    VPHADDWQ = 1086,
    VPHADDW = 1087,
    VPHMINPOSUW = 1088,
    VPHSUBBW = 1089,
    VPHSUBDQ = 1090,
    VPHSUBD = 1091,
    VPHSUBSW = 1092,
    VPHSUBWD = 1093,
    VPHSUBW = 1094,
    VPINSRB = 1095,
    VPINSRD = 1096,
    VPINSRQ = 1097,
    VPINSRW = 1098,
    VPLZCNTD = 1099,
    VPLZCNTQ = 1100,
    VPMACSDD = 1101,
    VPMACSDQH = 1102,
    VPMACSDQL = 1103,
    VPMACSSDD = 1104,
    VPMACSSDQH = 1105,
    VPMACSSDQL = 1106,
    VPMACSSWD = 1107,
    VPMACSSWW = 1108,
    VPMACSWD = 1109,
    VPMACSWW = 1110,
    VPMADCSSWD = 1111,
    VPMADCSWD = 1112,
    VPMADDUBSW = 1113,
    VPMADDWD = 1114,
    VPMASKMOVD = 1115,
    VPMASKMOVQ = 1116,
    VPMAXSB = 1117,
    VPMAXSD = 1118,
    VPMAXSQ = 1119,
    VPMAXSW = 1120,
    VPMAXUB = 1121,
    VPMAXUD = 1122,
    VPMAXUQ = 1123,
    VPMAXUW = 1124,
    VPMINSB = 1125,
    VPMINSD = 1126,
    VPMINSQ = 1127,
    VPMINSW = 1128,
    VPMINUB = 1129,
    VPMINUD = 1130,
    VPMINUQ = 1131,
    VPMINUW = 1132,
    VPMOVDB = 1133,
    VPMOVDW = 1134,
    VPMOVM2B = 1135,
    VPMOVM2D = 1136,
    VPMOVM2Q = 1137,
    VPMOVM2W = 1138,
    VPMOVMSKB = 1139,
    VPMOVQB = 1140,
    VPMOVQD = 1141,
    VPMOVQW = 1142,
    VPMOVSDB = 1143,
    VPMOVSDW = 1144,
    VPMOVSQB = 1145,
    VPMOVSQD = 1146,
    VPMOVSQW = 1147,
    VPMOVSXBD = 1148,
    VPMOVSXBQ = 1149,
    VPMOVSXBW = 1150,
    VPMOVSXDQ = 1151,
    VPMOVSXWD = 1152,
    VPMOVSXWQ = 1153,
    VPMOVUSDB = 1154,
    VPMOVUSDW = 1155,
    VPMOVUSQB = 1156,
    VPMOVUSQD = 1157,
    VPMOVUSQW = 1158,
    VPMOVZXBD = 1159,
    VPMOVZXBQ = 1160,
    VPMOVZXBW = 1161,
    VPMOVZXDQ = 1162,
    VPMOVZXWD = 1163,
    VPMOVZXWQ = 1164,
    VPMULDQ = 1165,
    VPMULHRSW = 1166,
    VPMULHUW = 1167,
    VPMULHW = 1168,
    VPMULLD = 1169,
    VPMULLQ = 1170,
    VPMULLW = 1171,
    VPMULUDQ = 1172,
    VPORD = 1173,
    VPORQ = 1174,
    VPOR = 1175,
    VPPERM = 1176,
    VPROTB = 1177,
    VPROTD = 1178,
    VPROTQ = 1179,
    VPROTW = 1180,
    VPSADBW = 1181,
    VPSCATTERDD = 1182,
    VPSCATTERDQ = 1183,
    VPSCATTERQD = 1184,
    VPSCATTERQQ = 1185,
    VPSHAB = 1186,
    VPSHAD = 1187,
    VPSHAQ = 1188,
    VPSHAW = 1189,
    VPSHLB = 1190,
    VPSHLD = 1191,
    VPSHLQ = 1192,
    VPSHLW = 1193,
    VPSHUFB = 1194,
    VPSHUFD = 1195,
    VPSHUFHW = 1196,
    VPSHUFLW = 1197,
    VPSIGNB = 1198,
    VPSIGND = 1199,
    VPSIGNW = 1200,
    VPSLLDQ = 1201,
    VPSLLD = 1202,
    VPSLLQ = 1203,
    VPSLLVD = 1204,
    VPSLLVQ = 1205,
    VPSLLW = 1206,
    VPSRAD = 1207,
    VPSRAQ = 1208,
    VPSRAVD = 1209,
    VPSRAVQ = 1210,
    VPSRAW = 1211,
    VPSRLDQ = 1212,
    VPSRLD = 1213,
    VPSRLQ = 1214,
    VPSRLVD = 1215,
    VPSRLVQ = 1216,
    VPSRLW = 1217,
    VPSUBB = 1218,
    VPSUBD = 1219,
    VPSUBQ = 1220,
    VPSUBSB = 1221,
    VPSUBSW = 1222,
    VPSUBUSB = 1223,
    VPSUBUSW = 1224,
    VPSUBW = 1225,
    VPTESTMD = 1226,
    VPTESTMQ = 1227,
    VPTESTNMD = 1228,
    VPTESTNMQ = 1229,
    VPTEST = 1230,
    VPUNPCKHBW = 1231,
    VPUNPCKHDQ = 1232,
    VPUNPCKHQDQ = 1233,
    VPUNPCKHWD = 1234,
    VPUNPCKLBW = 1235,
    VPUNPCKLDQ = 1236,
    VPUNPCKLQDQ = 1237,
    VPUNPCKLWD = 1238,
    VPXORD = 1239,
    VPXORQ = 1240,
    VPXOR = 1241,
    VRCP14PD = 1242,
    VRCP14PS = 1243,
    VRCP14SD = 1244,
    VRCP14SS = 1245,
    VRCP28PD = 1246,
    VRCP28PS = 1247,
    VRCP28SD = 1248,
    VRCP28SS = 1249,
    VRCPPS = 1250,
    VRCPSS = 1251,
    VRNDSCALEPD = 1252,
    VRNDSCALEPS = 1253,
    VRNDSCALESD = 1254,
    VRNDSCALESS = 1255,
    VROUNDPD = 1256,
    VROUNDPS = 1257,
    VROUNDSD = 1258,
    VROUNDSS = 1259,
    VRSQRT14PD = 1260,
    VRSQRT14PS = 1261,
    VRSQRT14SD = 1262,
    VRSQRT14SS = 1263,
    VRSQRT28PD = 1264,
    VRSQRT28PS = 1265,
    VRSQRT28SD = 1266,
    VRSQRT28SS = 1267,
    VRSQRTPS = 1268,
    VRSQRTSS = 1269,
    VSCATTERDPD = 1270,
    VSCATTERDPS = 1271,
    VSCATTERPF0DPD = 1272,
    VSCATTERPF0DPS = 1273,
    VSCATTERPF0QPD = 1274,
    VSCATTERPF0QPS = 1275,
    VSCATTERPF1DPD = 1276,
    VSCATTERPF1DPS = 1277,
    VSCATTERPF1QPD = 1278,
    VSCATTERPF1QPS = 1279,
    VSCATTERQPD = 1280,
    VSCATTERQPS = 1281,
    VSHUFPD = 1282,
    VSHUFPS = 1283,
    VSQRTPD = 1284,
    VSQRTPS = 1285,
    VSQRTSD = 1286,
    VSQRTSS = 1287,
    VSTMXCSR = 1288,
    VSUBPD = 1289,
    VSUBPS = 1290,
    VSUBSD = 1291,
    VSUBSS = 1292,
    VTESTPD = 1293,
    VTESTPS = 1294,
    VUNPCKHPD = 1295,
    VUNPCKHPS = 1296,
    VUNPCKLPD = 1297,
    VUNPCKLPS = 1298,
    VZEROALL = 1299,
    VZEROUPPER = 1300,
    WAIT = 1301,
    WBINVD = 1302,
    WRFSBASE = 1303,
    WRGSBASE = 1304,
    WRMSR = 1305,
    XABORT = 1306,
    XACQUIRE = 1307,
    XBEGIN = 1308,
    XCHG = 1309,
    XCRYPTCBC = 1310,
    XCRYPTCFB = 1311,
    XCRYPTCTR = 1312,
    XCRYPTECB = 1313,
    XCRYPTOFB = 1314,
    XEND = 1315,
    XGETBV = 1316,
    XLATB = 1317,
    XRELEASE = 1318,
    XRSTOR = 1319,
    XRSTOR64 = 1320,
    XRSTORS = 1321,
    XRSTORS64 = 1322,
    XSAVE = 1323,
    XSAVE64 = 1324,
    XSAVEC = 1325,
    XSAVEC64 = 1326,
    XSAVEOPT = 1327,
    XSAVEOPT64 = 1328,
    XSAVES = 1329,
    XSAVES64 = 1330,
    XSETBV = 1331,
    XSHA1 = 1332,
    XSHA256 = 1333,
    XSTORE = 1334,
    XTEST = 1335,
    FDISI8087_NOP = 1336,
    FENI8087_NOP = 1337,
    ENDING = 1338,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum ArmCpuModel {
    Model_926 = 0,
    Model_946 = 1,
    Model_1026 = 2,
    Model_1136_R2 = 3,
    Model_1136 = 4,
    Model_1176 = 5,
    Model_11MPCORE = 6,
    CORTEX_M0 = 7,
    CORTEX_M3 = 8,
    CORTEX_M4 = 9,
    CORTEX_M7 = 10,
    CORTEX_M33 = 11,
    CORTEX_R5 = 12,
    CORTEX_R5F = 13,
    CORTEX_A7 = 14,
    CORTEX_A8 = 15,
    CORTEX_A9 = 16,
    CORTEX_A15 = 17,
    TI925T = 18,
    SA1100 = 19,
    SA1110 = 20,
    PXA250 = 21,
    PXA255 = 22,
    PXA260 = 23,
    PXA261 = 24,
    PXA262 = 25,
    PXA270 = 26,
    PXA270A0 = 27,
    PXA270A1 = 28,
    PXA270B0 = 29,
    PXA270B1 = 30,
    PXA270C0 = 31,
    PXA270C5 = 32,
    MAX = 33,
    ENDING = 34,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct RegisterARM_CP {
    pub cp: u32,
    pub is64: u32,
    pub sec: u32,
    pub crn: u32,
    pub crm: u32,
    pub opc1: u32,
    pub opc2: u32,
    pub val: u64,
}
impl RegisterARM {
    pub const R13: RegisterARM = RegisterARM::SP;
}
impl RegisterARM {
    pub const R14: RegisterARM = RegisterARM::LR;
}
impl RegisterARM {
    pub const R15: RegisterARM = RegisterARM::PC;
}
impl RegisterARM {
    pub const SB: RegisterARM = RegisterARM::R9;
}
impl RegisterARM {
    pub const SL: RegisterARM = RegisterARM::R10;
}
impl RegisterARM {
    pub const FP: RegisterARM = RegisterARM::R11;
}
impl RegisterARM {
    pub const IP: RegisterARM = RegisterARM::R12;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum RegisterARM {
    INVALID = 0,
    APSR = 1,
    APSR_NZCV = 2,
    CPSR = 3,
    FPEXC = 4,
    FPINST = 5,
    FPSCR = 6,
    FPSCR_NZCV = 7,
    FPSID = 8,
    ITSTATE = 9,
    LR = 10,
    PC = 11,
    SP = 12,
    SPSR = 13,
    D0 = 14,
    D1 = 15,
    D2 = 16,
    D3 = 17,
    D4 = 18,
    D5 = 19,
    D6 = 20,
    D7 = 21,
    D8 = 22,
    D9 = 23,
    D10 = 24,
    D11 = 25,
    D12 = 26,
    D13 = 27,
    D14 = 28,
    D15 = 29,
    D16 = 30,
    D17 = 31,
    D18 = 32,
    D19 = 33,
    D20 = 34,
    D21 = 35,
    D22 = 36,
    D23 = 37,
    D24 = 38,
    D25 = 39,
    D26 = 40,
    D27 = 41,
    D28 = 42,
    D29 = 43,
    D30 = 44,
    D31 = 45,
    FPINST2 = 46,
    MVFR0 = 47,
    MVFR1 = 48,
    MVFR2 = 49,
    Q0 = 50,
    Q1 = 51,
    Q2 = 52,
    Q3 = 53,
    Q4 = 54,
    Q5 = 55,
    Q6 = 56,
    Q7 = 57,
    Q8 = 58,
    Q9 = 59,
    Q10 = 60,
    Q11 = 61,
    Q12 = 62,
    Q13 = 63,
    Q14 = 64,
    Q15 = 65,
    R0 = 66,
    R1 = 67,
    R2 = 68,
    R3 = 69,
    R4 = 70,
    R5 = 71,
    R6 = 72,
    R7 = 73,
    R8 = 74,
    R9 = 75,
    R10 = 76,
    R11 = 77,
    R12 = 78,
    S0 = 79,
    S1 = 80,
    S2 = 81,
    S3 = 82,
    S4 = 83,
    S5 = 84,
    S6 = 85,
    S7 = 86,
    S8 = 87,
    S9 = 88,
    S10 = 89,
    S11 = 90,
    S12 = 91,
    S13 = 92,
    S14 = 93,
    S15 = 94,
    S16 = 95,
    S17 = 96,
    S18 = 97,
    S19 = 98,
    S20 = 99,
    S21 = 100,
    S22 = 101,
    S23 = 102,
    S24 = 103,
    S25 = 104,
    S26 = 105,
    S27 = 106,
    S28 = 107,
    S29 = 108,
    S30 = 109,
    S31 = 110,
    C1_C0_2 = 111,
    C13_C0_2 = 112,
    C13_C0_3 = 113,
    IPSR = 114,
    MSP = 115,
    PSP = 116,
    CONTROL = 117,
    IAPSR = 118,
    EAPSR = 119,
    XPSR = 120,
    EPSR = 121,
    IEPSR = 122,
    PRIMASK = 123,
    BASEPRI = 124,
    BASEPRI_MAX = 125,
    FAULTMASK = 126,
    APSR_NZCVQ = 127,
    APSR_G = 128,
    APSR_NZCVQG = 129,
    IAPSR_NZCVQ = 130,
    IAPSR_G = 131,
    IAPSR_NZCVQG = 132,
    EAPSR_NZCVQ = 133,
    EAPSR_G = 134,
    EAPSR_NZCVQG = 135,
    XPSR_NZCVQ = 136,
    XPSR_G = 137,
    XPSR_NZCVQG = 138,
    CP_REG = 139,
    ENDING = 140,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum Arm64CpuModel {
    A57 = 0,
    A53 = 1,
    A72 = 2,
    MAX = 3,
    ENDING = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct RegisterARM64_CP {
    pub crn: u32,
    pub crm: u32,
    pub op0: u32,
    pub op1: u32,
    pub op2: u32,
    pub val: u64,
}
impl RegisterARM64 {
    pub const IP0: RegisterARM64 = RegisterARM64::X16;
}
impl RegisterARM64 {
    pub const IP1: RegisterARM64 = RegisterARM64::X17;
}
impl RegisterARM64 {
    pub const FP: RegisterARM64 = RegisterARM64::X29;
}
impl RegisterARM64 {
    pub const LR: RegisterARM64 = RegisterARM64::X30;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum RegisterARM64 {
    INVALID = 0,
    X29 = 1,
    X30 = 2,
    NZCV = 3,
    SP = 4,
    WSP = 5,
    WZR = 6,
    XZR = 7,
    B0 = 8,
    B1 = 9,
    B2 = 10,
    B3 = 11,
    B4 = 12,
    B5 = 13,
    B6 = 14,
    B7 = 15,
    B8 = 16,
    B9 = 17,
    B10 = 18,
    B11 = 19,
    B12 = 20,
    B13 = 21,
    B14 = 22,
    B15 = 23,
    B16 = 24,
    B17 = 25,
    B18 = 26,
    B19 = 27,
    B20 = 28,
    B21 = 29,
    B22 = 30,
    B23 = 31,
    B24 = 32,
    B25 = 33,
    B26 = 34,
    B27 = 35,
    B28 = 36,
    B29 = 37,
    B30 = 38,
    B31 = 39,
    D0 = 40,
    D1 = 41,
    D2 = 42,
    D3 = 43,
    D4 = 44,
    D5 = 45,
    D6 = 46,
    D7 = 47,
    D8 = 48,
    D9 = 49,
    D10 = 50,
    D11 = 51,
    D12 = 52,
    D13 = 53,
    D14 = 54,
    D15 = 55,
    D16 = 56,
    D17 = 57,
    D18 = 58,
    D19 = 59,
    D20 = 60,
    D21 = 61,
    D22 = 62,
    D23 = 63,
    D24 = 64,
    D25 = 65,
    D26 = 66,
    D27 = 67,
    D28 = 68,
    D29 = 69,
    D30 = 70,
    D31 = 71,
    H0 = 72,
    H1 = 73,
    H2 = 74,
    H3 = 75,
    H4 = 76,
    H5 = 77,
    H6 = 78,
    H7 = 79,
    H8 = 80,
    H9 = 81,
    H10 = 82,
    H11 = 83,
    H12 = 84,
    H13 = 85,
    H14 = 86,
    H15 = 87,
    H16 = 88,
    H17 = 89,
    H18 = 90,
    H19 = 91,
    H20 = 92,
    H21 = 93,
    H22 = 94,
    H23 = 95,
    H24 = 96,
    H25 = 97,
    H26 = 98,
    H27 = 99,
    H28 = 100,
    H29 = 101,
    H30 = 102,
    H31 = 103,
    Q0 = 104,
    Q1 = 105,
    Q2 = 106,
    Q3 = 107,
    Q4 = 108,
    Q5 = 109,
    Q6 = 110,
    Q7 = 111,
    Q8 = 112,
    Q9 = 113,
    Q10 = 114,
    Q11 = 115,
    Q12 = 116,
    Q13 = 117,
    Q14 = 118,
    Q15 = 119,
    Q16 = 120,
    Q17 = 121,
    Q18 = 122,
    Q19 = 123,
    Q20 = 124,
    Q21 = 125,
    Q22 = 126,
    Q23 = 127,
    Q24 = 128,
    Q25 = 129,
    Q26 = 130,
    Q27 = 131,
    Q28 = 132,
    Q29 = 133,
    Q30 = 134,
    Q31 = 135,
    S0 = 136,
    S1 = 137,
    S2 = 138,
    S3 = 139,
    S4 = 140,
    S5 = 141,
    S6 = 142,
    S7 = 143,
    S8 = 144,
    S9 = 145,
    S10 = 146,
    S11 = 147,
    S12 = 148,
    S13 = 149,
    S14 = 150,
    S15 = 151,
    S16 = 152,
    S17 = 153,
    S18 = 154,
    S19 = 155,
    S20 = 156,
    S21 = 157,
    S22 = 158,
    S23 = 159,
    S24 = 160,
    S25 = 161,
    S26 = 162,
    S27 = 163,
    S28 = 164,
    S29 = 165,
    S30 = 166,
    S31 = 167,
    W0 = 168,
    W1 = 169,
    W2 = 170,
    W3 = 171,
    W4 = 172,
    W5 = 173,
    W6 = 174,
    W7 = 175,
    W8 = 176,
    W9 = 177,
    W10 = 178,
    W11 = 179,
    W12 = 180,
    W13 = 181,
    W14 = 182,
    W15 = 183,
    W16 = 184,
    W17 = 185,
    W18 = 186,
    W19 = 187,
    W20 = 188,
    W21 = 189,
    W22 = 190,
    W23 = 191,
    W24 = 192,
    W25 = 193,
    W26 = 194,
    W27 = 195,
    W28 = 196,
    W29 = 197,
    W30 = 198,
    X0 = 199,
    X1 = 200,
    X2 = 201,
    X3 = 202,
    X4 = 203,
    X5 = 204,
    X6 = 205,
    X7 = 206,
    X8 = 207,
    X9 = 208,
    X10 = 209,
    X11 = 210,
    X12 = 211,
    X13 = 212,
    X14 = 213,
    X15 = 214,
    X16 = 215,
    X17 = 216,
    X18 = 217,
    X19 = 218,
    X20 = 219,
    X21 = 220,
    X22 = 221,
    X23 = 222,
    X24 = 223,
    X25 = 224,
    X26 = 225,
    X27 = 226,
    X28 = 227,
    V0 = 228,
    V1 = 229,
    V2 = 230,
    V3 = 231,
    V4 = 232,
    V5 = 233,
    V6 = 234,
    V7 = 235,
    V8 = 236,
    V9 = 237,
    V10 = 238,
    V11 = 239,
    V12 = 240,
    V13 = 241,
    V14 = 242,
    V15 = 243,
    V16 = 244,
    V17 = 245,
    V18 = 246,
    V19 = 247,
    V20 = 248,
    V21 = 249,
    V22 = 250,
    V23 = 251,
    V24 = 252,
    V25 = 253,
    V26 = 254,
    V27 = 255,
    V28 = 256,
    V29 = 257,
    V30 = 258,
    V31 = 259,
    PC = 260,
    CPACR_EL1 = 261,
    TPIDR_EL0 = 262,
    TPIDRRO_EL0 = 263,
    TPIDR_EL1 = 264,
    PSTATE = 265,
    ELR_EL0 = 266,
    ELR_EL1 = 267,
    ELR_EL2 = 268,
    ELR_EL3 = 269,
    SP_EL0 = 270,
    SP_EL1 = 271,
    SP_EL2 = 272,
    SP_EL3 = 273,
    TTBR0_EL1 = 274,
    TTBR1_EL1 = 275,
    ESR_EL0 = 276,
    ESR_EL1 = 277,
    ESR_EL2 = 278,
    ESR_EL3 = 279,
    FAR_EL0 = 280,
    FAR_EL1 = 281,
    FAR_EL2 = 282,
    FAR_EL3 = 283,
    PAR_EL1 = 284,
    MAIR_EL1 = 285,
    VBAR_EL0 = 286,
    VBAR_EL1 = 287,
    VBAR_EL2 = 288,
    VBAR_EL3 = 289,
    CP_REG = 290,
    FPCR = 291,
    FPSR = 292,
    ENDING = 293,
}
pub type uc_cb_insn_sys_t = ::core::option::Option<
    unsafe extern "C" fn(
        uc: *mut uc_engine,
        reg: RegisterARM64,
        cp_reg: *const RegisterARM64_CP,
        user_data: *mut ::core::ffi::c_void,
    ) -> u32,
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum Arm64Insn {
    UC_ARM64_INS_INVALID = 0,
    UC_ARM64_INS_MRS = 1,
    UC_ARM64_INS_MSR = 2,
    UC_ARM64_INS_SYS = 3,
    UC_ARM64_INS_SYSL = 4,
    UC_ARM64_INS_ENDING = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum Mips32CpuModel {
    Model_4KC = 0,
    Model_4KM = 1,
    Model_4KECR1 = 2,
    Model_4KEMR1 = 3,
    Model_4KEC = 4,
    Model_4KEM = 5,
    Model_24KC = 6,
    Model_24KEC = 7,
    Model_24KF = 8,
    Model_34KF = 9,
    Model_74KF = 10,
    M14K = 11,
    M14KC = 12,
    P5600 = 13,
    MIPS32R6_GENERIC = 14,
    I7200 = 15,
    ENDING = 16,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum Mips64CpuModel {
    R4000 = 0,
    VR5432 = 1,
    Model_5KC = 2,
    Model_5KF = 3,
    Model_20KC = 4,
    MIPS64R2_GENERIC = 5,
    Model_5KEC = 6,
    Model_5KEF = 7,
    I6400 = 8,
    I6500 = 9,
    LOONGSON_2E = 10,
    LOONGSON_2F = 11,
    MIPS64DSPR2 = 12,
    ENDING = 13,
}
impl RegisterMIPS {
    pub const ZERO: RegisterMIPS = RegisterMIPS::R0;
}
impl RegisterMIPS {
    pub const AT: RegisterMIPS = RegisterMIPS::R1;
}
impl RegisterMIPS {
    pub const V0: RegisterMIPS = RegisterMIPS::R2;
}
impl RegisterMIPS {
    pub const V1: RegisterMIPS = RegisterMIPS::R3;
}
impl RegisterMIPS {
    pub const A0: RegisterMIPS = RegisterMIPS::R4;
}
impl RegisterMIPS {
    pub const A1: RegisterMIPS = RegisterMIPS::R5;
}
impl RegisterMIPS {
    pub const A2: RegisterMIPS = RegisterMIPS::R6;
}
impl RegisterMIPS {
    pub const A3: RegisterMIPS = RegisterMIPS::R7;
}
impl RegisterMIPS {
    pub const T0: RegisterMIPS = RegisterMIPS::R8;
}
impl RegisterMIPS {
    pub const T1: RegisterMIPS = RegisterMIPS::R9;
}
impl RegisterMIPS {
    pub const T2: RegisterMIPS = RegisterMIPS::R10;
}
impl RegisterMIPS {
    pub const T3: RegisterMIPS = RegisterMIPS::R11;
}
impl RegisterMIPS {
    pub const T4: RegisterMIPS = RegisterMIPS::R12;
}
impl RegisterMIPS {
    pub const T5: RegisterMIPS = RegisterMIPS::R13;
}
impl RegisterMIPS {
    pub const T6: RegisterMIPS = RegisterMIPS::R14;
}
impl RegisterMIPS {
    pub const T7: RegisterMIPS = RegisterMIPS::R15;
}
impl RegisterMIPS {
    pub const S0: RegisterMIPS = RegisterMIPS::R16;
}
impl RegisterMIPS {
    pub const S1: RegisterMIPS = RegisterMIPS::R17;
}
impl RegisterMIPS {
    pub const S2: RegisterMIPS = RegisterMIPS::R18;
}
impl RegisterMIPS {
    pub const S3: RegisterMIPS = RegisterMIPS::R19;
}
impl RegisterMIPS {
    pub const S4: RegisterMIPS = RegisterMIPS::R20;
}
impl RegisterMIPS {
    pub const S5: RegisterMIPS = RegisterMIPS::R21;
}
impl RegisterMIPS {
    pub const S6: RegisterMIPS = RegisterMIPS::R22;
}
impl RegisterMIPS {
    pub const S7: RegisterMIPS = RegisterMIPS::R23;
}
impl RegisterMIPS {
    pub const T8: RegisterMIPS = RegisterMIPS::R24;
}
impl RegisterMIPS {
    pub const T9: RegisterMIPS = RegisterMIPS::R25;
}
impl RegisterMIPS {
    pub const K0: RegisterMIPS = RegisterMIPS::R26;
}
impl RegisterMIPS {
    pub const K1: RegisterMIPS = RegisterMIPS::R27;
}
impl RegisterMIPS {
    pub const GP: RegisterMIPS = RegisterMIPS::R28;
}
impl RegisterMIPS {
    pub const SP: RegisterMIPS = RegisterMIPS::R29;
}
impl RegisterMIPS {
    pub const FP: RegisterMIPS = RegisterMIPS::R30;
}
impl RegisterMIPS {
    pub const S8: RegisterMIPS = RegisterMIPS::R30;
}
impl RegisterMIPS {
    pub const RA: RegisterMIPS = RegisterMIPS::R31;
}
impl RegisterMIPS {
    pub const HI0: RegisterMIPS = RegisterMIPS::AC0;
}
impl RegisterMIPS {
    pub const HI1: RegisterMIPS = RegisterMIPS::AC1;
}
impl RegisterMIPS {
    pub const HI2: RegisterMIPS = RegisterMIPS::AC2;
}
impl RegisterMIPS {
    pub const HI3: RegisterMIPS = RegisterMIPS::AC3;
}
impl RegisterMIPS {
    pub const LO0: RegisterMIPS = RegisterMIPS::AC0;
}
impl RegisterMIPS {
    pub const LO1: RegisterMIPS = RegisterMIPS::AC1;
}
impl RegisterMIPS {
    pub const LO2: RegisterMIPS = RegisterMIPS::AC2;
}
impl RegisterMIPS {
    pub const LO3: RegisterMIPS = RegisterMIPS::AC3;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum RegisterMIPS {
    INVALID = 0,
    PC = 1,
    R0 = 2,
    R1 = 3,
    R2 = 4,
    R3 = 5,
    R4 = 6,
    R5 = 7,
    R6 = 8,
    R7 = 9,
    R8 = 10,
    R9 = 11,
    R10 = 12,
    R11 = 13,
    R12 = 14,
    R13 = 15,
    R14 = 16,
    R15 = 17,
    R16 = 18,
    R17 = 19,
    R18 = 20,
    R19 = 21,
    R20 = 22,
    R21 = 23,
    R22 = 24,
    R23 = 25,
    R24 = 26,
    R25 = 27,
    R26 = 28,
    R27 = 29,
    R28 = 30,
    R29 = 31,
    R30 = 32,
    R31 = 33,
    DSPCCOND = 34,
    DSPCARRY = 35,
    DSPEFI = 36,
    DSPOUTFLAG = 37,
    DSPOUTFLAG16_19 = 38,
    DSPOUTFLAG20 = 39,
    DSPOUTFLAG21 = 40,
    DSPOUTFLAG22 = 41,
    DSPOUTFLAG23 = 42,
    DSPPOS = 43,
    DSPSCOUNT = 44,
    AC0 = 45,
    AC1 = 46,
    AC2 = 47,
    AC3 = 48,
    CC0 = 49,
    CC1 = 50,
    CC2 = 51,
    CC3 = 52,
    CC4 = 53,
    CC5 = 54,
    CC6 = 55,
    CC7 = 56,
    F0 = 57,
    F1 = 58,
    F2 = 59,
    F3 = 60,
    F4 = 61,
    F5 = 62,
    F6 = 63,
    F7 = 64,
    F8 = 65,
    F9 = 66,
    F10 = 67,
    F11 = 68,
    F12 = 69,
    F13 = 70,
    F14 = 71,
    F15 = 72,
    F16 = 73,
    F17 = 74,
    F18 = 75,
    F19 = 76,
    F20 = 77,
    F21 = 78,
    F22 = 79,
    F23 = 80,
    F24 = 81,
    F25 = 82,
    F26 = 83,
    F27 = 84,
    F28 = 85,
    F29 = 86,
    F30 = 87,
    F31 = 88,
    FCC0 = 89,
    FCC1 = 90,
    FCC2 = 91,
    FCC3 = 92,
    FCC4 = 93,
    FCC5 = 94,
    FCC6 = 95,
    FCC7 = 96,
    W0 = 97,
    W1 = 98,
    W2 = 99,
    W3 = 100,
    W4 = 101,
    W5 = 102,
    W6 = 103,
    W7 = 104,
    W8 = 105,
    W9 = 106,
    W10 = 107,
    W11 = 108,
    W12 = 109,
    W13 = 110,
    W14 = 111,
    W15 = 112,
    W16 = 113,
    W17 = 114,
    W18 = 115,
    W19 = 116,
    W20 = 117,
    W21 = 118,
    W22 = 119,
    W23 = 120,
    W24 = 121,
    W25 = 122,
    W26 = 123,
    W27 = 124,
    W28 = 125,
    W29 = 126,
    W30 = 127,
    W31 = 128,
    HI = 129,
    LO = 130,
    P0 = 131,
    P1 = 132,
    P2 = 133,
    MPL0 = 134,
    MPL1 = 135,
    MPL2 = 136,
    CP0_CONFIG3 = 137,
    CP0_USERLOCAL = 138,
    CP0_STATUS = 139,
    FIR = 140,
    FCSR = 141,
    ENDING = 142,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum Sparc32CpuModel {
    FUJITSU_MB86904 = 0,
    FUJITSU_MB86907 = 1,
    TI_MICROSPARC_I = 2,
    TI_MICROSPARC_II = 3,
    TI_MICROSPARC_IIEP = 4,
    TI_SUPERSPARC_40 = 5,
    TI_SUPERSPARC_50 = 6,
    TI_SUPERSPARC_51 = 7,
    TI_SUPERSPARC_60 = 8,
    TI_SUPERSPARC_61 = 9,
    TI_SUPERSPARC_II = 10,
    LEON2 = 11,
    LEON3 = 12,
    ENDING = 13,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum Sparc64CpuModel {
    FUJITSU = 0,
    FUJITSU_III = 1,
    FUJITSU_IV = 2,
    FUJITSU_V = 3,
    TI_ULTRASPARC_I = 4,
    TI_ULTRASPARC_II = 5,
    TI_ULTRASPARC_III = 6,
    TI_ULTRASPARC_IIE = 7,
    SUN_ULTRASPARC_III = 8,
    SUN_ULTRASPARC_III_CU = 9,
    SUN_ULTRASPARC_IIII = 10,
    SUN_ULTRASPARC_IV = 11,
    SUN_ULTRASPARC_IV_PLUS = 12,
    SUN_ULTRASPARC_IIII_PLUS = 13,
    SUN_ULTRASPARC_T1 = 14,
    SUN_ULTRASPARC_T2 = 15,
    NEC_ULTRASPARC_I = 16,
    ENDING = 17,
}
impl RegisterSPARC {
    pub const O6: RegisterSPARC = RegisterSPARC::SP;
}
impl RegisterSPARC {
    pub const I6: RegisterSPARC = RegisterSPARC::FP;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum RegisterSPARC {
    INVALID = 0,
    F0 = 1,
    F1 = 2,
    F2 = 3,
    F3 = 4,
    F4 = 5,
    F5 = 6,
    F6 = 7,
    F7 = 8,
    F8 = 9,
    F9 = 10,
    F10 = 11,
    F11 = 12,
    F12 = 13,
    F13 = 14,
    F14 = 15,
    F15 = 16,
    F16 = 17,
    F17 = 18,
    F18 = 19,
    F19 = 20,
    F20 = 21,
    F21 = 22,
    F22 = 23,
    F23 = 24,
    F24 = 25,
    F25 = 26,
    F26 = 27,
    F27 = 28,
    F28 = 29,
    F29 = 30,
    F30 = 31,
    F31 = 32,
    F32 = 33,
    F34 = 34,
    F36 = 35,
    F38 = 36,
    F40 = 37,
    F42 = 38,
    F44 = 39,
    F46 = 40,
    F48 = 41,
    F50 = 42,
    F52 = 43,
    F54 = 44,
    F56 = 45,
    F58 = 46,
    F60 = 47,
    F62 = 48,
    FCC0 = 49,
    FCC1 = 50,
    FCC2 = 51,
    FCC3 = 52,
    G0 = 53,
    G1 = 54,
    G2 = 55,
    G3 = 56,
    G4 = 57,
    G5 = 58,
    G6 = 59,
    G7 = 60,
    I0 = 61,
    I1 = 62,
    I2 = 63,
    I3 = 64,
    I4 = 65,
    I5 = 66,
    FP = 67,
    I7 = 68,
    ICC = 69,
    L0 = 70,
    L1 = 71,
    L2 = 72,
    L3 = 73,
    L4 = 74,
    L5 = 75,
    L6 = 76,
    L7 = 77,
    O0 = 78,
    O1 = 79,
    O2 = 80,
    O3 = 81,
    O4 = 82,
    O5 = 83,
    SP = 84,
    O7 = 85,
    Y = 86,
    XCC = 87,
    PC = 88,
    ENDING = 89,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum PpcCpuModel {
    UC_CPU_PPC32_401 = 0,
    UC_CPU_PPC32_401A1 = 1,
    UC_CPU_PPC32_401B2 = 2,
    UC_CPU_PPC32_401C2 = 3,
    UC_CPU_PPC32_401D2 = 4,
    UC_CPU_PPC32_401E2 = 5,
    UC_CPU_PPC32_401F2 = 6,
    UC_CPU_PPC32_401G2 = 7,
    UC_CPU_PPC32_IOP480 = 8,
    UC_CPU_PPC32_COBRA = 9,
    UC_CPU_PPC32_403GA = 10,
    UC_CPU_PPC32_403GB = 11,
    UC_CPU_PPC32_403GC = 12,
    UC_CPU_PPC32_403GCX = 13,
    UC_CPU_PPC32_405D2 = 14,
    UC_CPU_PPC32_405D4 = 15,
    UC_CPU_PPC32_405CRA = 16,
    UC_CPU_PPC32_405CRB = 17,
    UC_CPU_PPC32_405CRC = 18,
    UC_CPU_PPC32_405EP = 19,
    UC_CPU_PPC32_405EZ = 20,
    UC_CPU_PPC32_405GPA = 21,
    UC_CPU_PPC32_405GPB = 22,
    UC_CPU_PPC32_405GPC = 23,
    UC_CPU_PPC32_405GPD = 24,
    UC_CPU_PPC32_405GPR = 25,
    UC_CPU_PPC32_405LP = 26,
    UC_CPU_PPC32_NPE405H = 27,
    UC_CPU_PPC32_NPE405H2 = 28,
    UC_CPU_PPC32_NPE405L = 29,
    UC_CPU_PPC32_NPE4GS3 = 30,
    UC_CPU_PPC32_STB03 = 31,
    UC_CPU_PPC32_STB04 = 32,
    UC_CPU_PPC32_STB25 = 33,
    UC_CPU_PPC32_X2VP4 = 34,
    UC_CPU_PPC32_X2VP20 = 35,
    UC_CPU_PPC32_440_XILINX = 36,
    UC_CPU_PPC32_440_XILINX_W_DFPU = 37,
    UC_CPU_PPC32_440EPA = 38,
    UC_CPU_PPC32_440EPB = 39,
    UC_CPU_PPC32_440EPX = 40,
    UC_CPU_PPC32_460EXB = 41,
    UC_CPU_PPC32_G2 = 42,
    UC_CPU_PPC32_G2H4 = 43,
    UC_CPU_PPC32_G2GP = 44,
    UC_CPU_PPC32_G2LS = 45,
    UC_CPU_PPC32_G2HIP3 = 46,
    UC_CPU_PPC32_G2HIP4 = 47,
    UC_CPU_PPC32_MPC603 = 48,
    UC_CPU_PPC32_G2LE = 49,
    UC_CPU_PPC32_G2LEGP = 50,
    UC_CPU_PPC32_G2LELS = 51,
    UC_CPU_PPC32_G2LEGP1 = 52,
    UC_CPU_PPC32_G2LEGP3 = 53,
    UC_CPU_PPC32_MPC5200_V10 = 54,
    UC_CPU_PPC32_MPC5200_V11 = 55,
    UC_CPU_PPC32_MPC5200_V12 = 56,
    UC_CPU_PPC32_MPC5200B_V20 = 57,
    UC_CPU_PPC32_MPC5200B_V21 = 58,
    UC_CPU_PPC32_E200Z5 = 59,
    UC_CPU_PPC32_E200Z6 = 60,
    UC_CPU_PPC32_E300C1 = 61,
    UC_CPU_PPC32_E300C2 = 62,
    UC_CPU_PPC32_E300C3 = 63,
    UC_CPU_PPC32_E300C4 = 64,
    UC_CPU_PPC32_MPC8343 = 65,
    UC_CPU_PPC32_MPC8343A = 66,
    UC_CPU_PPC32_MPC8343E = 67,
    UC_CPU_PPC32_MPC8343EA = 68,
    UC_CPU_PPC32_MPC8347T = 69,
    UC_CPU_PPC32_MPC8347P = 70,
    UC_CPU_PPC32_MPC8347AT = 71,
    UC_CPU_PPC32_MPC8347AP = 72,
    UC_CPU_PPC32_MPC8347ET = 73,
    UC_CPU_PPC32_MPC8347EP = 74,
    UC_CPU_PPC32_MPC8347EAT = 75,
    UC_CPU_PPC32_MPC8347EAP = 76,
    UC_CPU_PPC32_MPC8349 = 77,
    UC_CPU_PPC32_MPC8349A = 78,
    UC_CPU_PPC32_MPC8349E = 79,
    UC_CPU_PPC32_MPC8349EA = 80,
    UC_CPU_PPC32_MPC8377 = 81,
    UC_CPU_PPC32_MPC8377E = 82,
    UC_CPU_PPC32_MPC8378 = 83,
    UC_CPU_PPC32_MPC8378E = 84,
    UC_CPU_PPC32_MPC8379 = 85,
    UC_CPU_PPC32_MPC8379E = 86,
    UC_CPU_PPC32_E500_V10 = 87,
    UC_CPU_PPC32_E500_V20 = 88,
    UC_CPU_PPC32_E500V2_V10 = 89,
    UC_CPU_PPC32_E500V2_V20 = 90,
    UC_CPU_PPC32_E500V2_V21 = 91,
    UC_CPU_PPC32_E500V2_V22 = 92,
    UC_CPU_PPC32_E500V2_V30 = 93,
    UC_CPU_PPC32_E500MC = 94,
    UC_CPU_PPC32_MPC8533_V10 = 95,
    UC_CPU_PPC32_MPC8533_V11 = 96,
    UC_CPU_PPC32_MPC8533E_V10 = 97,
    UC_CPU_PPC32_MPC8533E_V11 = 98,
    UC_CPU_PPC32_MPC8540_V10 = 99,
    UC_CPU_PPC32_MPC8540_V20 = 100,
    UC_CPU_PPC32_MPC8540_V21 = 101,
    UC_CPU_PPC32_MPC8541_V10 = 102,
    UC_CPU_PPC32_MPC8541_V11 = 103,
    UC_CPU_PPC32_MPC8541E_V10 = 104,
    UC_CPU_PPC32_MPC8541E_V11 = 105,
    UC_CPU_PPC32_MPC8543_V10 = 106,
    UC_CPU_PPC32_MPC8543_V11 = 107,
    UC_CPU_PPC32_MPC8543_V20 = 108,
    UC_CPU_PPC32_MPC8543_V21 = 109,
    UC_CPU_PPC32_MPC8543E_V10 = 110,
    UC_CPU_PPC32_MPC8543E_V11 = 111,
    UC_CPU_PPC32_MPC8543E_V20 = 112,
    UC_CPU_PPC32_MPC8543E_V21 = 113,
    UC_CPU_PPC32_MPC8544_V10 = 114,
    UC_CPU_PPC32_MPC8544_V11 = 115,
    UC_CPU_PPC32_MPC8544E_V10 = 116,
    UC_CPU_PPC32_MPC8544E_V11 = 117,
    UC_CPU_PPC32_MPC8545_V20 = 118,
    UC_CPU_PPC32_MPC8545_V21 = 119,
    UC_CPU_PPC32_MPC8545E_V20 = 120,
    UC_CPU_PPC32_MPC8545E_V21 = 121,
    UC_CPU_PPC32_MPC8547E_V20 = 122,
    UC_CPU_PPC32_MPC8547E_V21 = 123,
    UC_CPU_PPC32_MPC8548_V10 = 124,
    UC_CPU_PPC32_MPC8548_V11 = 125,
    UC_CPU_PPC32_MPC8548_V20 = 126,
    UC_CPU_PPC32_MPC8548_V21 = 127,
    UC_CPU_PPC32_MPC8548E_V10 = 128,
    UC_CPU_PPC32_MPC8548E_V11 = 129,
    UC_CPU_PPC32_MPC8548E_V20 = 130,
    UC_CPU_PPC32_MPC8548E_V21 = 131,
    UC_CPU_PPC32_MPC8555_V10 = 132,
    UC_CPU_PPC32_MPC8555_V11 = 133,
    UC_CPU_PPC32_MPC8555E_V10 = 134,
    UC_CPU_PPC32_MPC8555E_V11 = 135,
    UC_CPU_PPC32_MPC8560_V10 = 136,
    UC_CPU_PPC32_MPC8560_V20 = 137,
    UC_CPU_PPC32_MPC8560_V21 = 138,
    UC_CPU_PPC32_MPC8567 = 139,
    UC_CPU_PPC32_MPC8567E = 140,
    UC_CPU_PPC32_MPC8568 = 141,
    UC_CPU_PPC32_MPC8568E = 142,
    UC_CPU_PPC32_MPC8572 = 143,
    UC_CPU_PPC32_MPC8572E = 144,
    UC_CPU_PPC32_E600 = 145,
    UC_CPU_PPC32_MPC8610 = 146,
    UC_CPU_PPC32_MPC8641 = 147,
    UC_CPU_PPC32_MPC8641D = 148,
    UC_CPU_PPC32_601_V0 = 149,
    UC_CPU_PPC32_601_V1 = 150,
    UC_CPU_PPC32_601_V2 = 151,
    UC_CPU_PPC32_602 = 152,
    UC_CPU_PPC32_603 = 153,
    UC_CPU_PPC32_603E_V1_1 = 154,
    UC_CPU_PPC32_603E_V1_2 = 155,
    UC_CPU_PPC32_603E_V1_3 = 156,
    UC_CPU_PPC32_603E_V1_4 = 157,
    UC_CPU_PPC32_603E_V2_2 = 158,
    UC_CPU_PPC32_603E_V3 = 159,
    UC_CPU_PPC32_603E_V4 = 160,
    UC_CPU_PPC32_603E_V4_1 = 161,
    UC_CPU_PPC32_603E7 = 162,
    UC_CPU_PPC32_603E7T = 163,
    UC_CPU_PPC32_603E7V = 164,
    UC_CPU_PPC32_603E7V1 = 165,
    UC_CPU_PPC32_603E7V2 = 166,
    UC_CPU_PPC32_603P = 167,
    UC_CPU_PPC32_604 = 168,
    UC_CPU_PPC32_604E_V1_0 = 169,
    UC_CPU_PPC32_604E_V2_2 = 170,
    UC_CPU_PPC32_604E_V2_4 = 171,
    UC_CPU_PPC32_604R = 172,
    UC_CPU_PPC32_740_V1_0 = 173,
    UC_CPU_PPC32_750_V1_0 = 174,
    UC_CPU_PPC32_740_V2_0 = 175,
    UC_CPU_PPC32_750_V2_0 = 176,
    UC_CPU_PPC32_740_V2_1 = 177,
    UC_CPU_PPC32_750_V2_1 = 178,
    UC_CPU_PPC32_740_V2_2 = 179,
    UC_CPU_PPC32_750_V2_2 = 180,
    UC_CPU_PPC32_740_V3_0 = 181,
    UC_CPU_PPC32_750_V3_0 = 182,
    UC_CPU_PPC32_740_V3_1 = 183,
    UC_CPU_PPC32_750_V3_1 = 184,
    UC_CPU_PPC32_740E = 185,
    UC_CPU_PPC32_750E = 186,
    UC_CPU_PPC32_740P = 187,
    UC_CPU_PPC32_750P = 188,
    UC_CPU_PPC32_750CL_V1_0 = 189,
    UC_CPU_PPC32_750CL_V2_0 = 190,
    UC_CPU_PPC32_750CX_V1_0 = 191,
    UC_CPU_PPC32_750CX_V2_0 = 192,
    UC_CPU_PPC32_750CX_V2_1 = 193,
    UC_CPU_PPC32_750CX_V2_2 = 194,
    UC_CPU_PPC32_750CXE_V2_1 = 195,
    UC_CPU_PPC32_750CXE_V2_2 = 196,
    UC_CPU_PPC32_750CXE_V2_3 = 197,
    UC_CPU_PPC32_750CXE_V2_4 = 198,
    UC_CPU_PPC32_750CXE_V2_4B = 199,
    UC_CPU_PPC32_750CXE_V3_0 = 200,
    UC_CPU_PPC32_750CXE_V3_1 = 201,
    UC_CPU_PPC32_750CXE_V3_1B = 202,
    UC_CPU_PPC32_750CXR = 203,
    UC_CPU_PPC32_750FL = 204,
    UC_CPU_PPC32_750FX_V1_0 = 205,
    UC_CPU_PPC32_750FX_V2_0 = 206,
    UC_CPU_PPC32_750FX_V2_1 = 207,
    UC_CPU_PPC32_750FX_V2_2 = 208,
    UC_CPU_PPC32_750FX_V2_3 = 209,
    UC_CPU_PPC32_750GL = 210,
    UC_CPU_PPC32_750GX_V1_0 = 211,
    UC_CPU_PPC32_750GX_V1_1 = 212,
    UC_CPU_PPC32_750GX_V1_2 = 213,
    UC_CPU_PPC32_750L_V2_0 = 214,
    UC_CPU_PPC32_750L_V2_1 = 215,
    UC_CPU_PPC32_750L_V2_2 = 216,
    UC_CPU_PPC32_750L_V3_0 = 217,
    UC_CPU_PPC32_750L_V3_2 = 218,
    UC_CPU_PPC32_745_V1_0 = 219,
    UC_CPU_PPC32_755_V1_0 = 220,
    UC_CPU_PPC32_745_V1_1 = 221,
    UC_CPU_PPC32_755_V1_1 = 222,
    UC_CPU_PPC32_745_V2_0 = 223,
    UC_CPU_PPC32_755_V2_0 = 224,
    UC_CPU_PPC32_745_V2_1 = 225,
    UC_CPU_PPC32_755_V2_1 = 226,
    UC_CPU_PPC32_745_V2_2 = 227,
    UC_CPU_PPC32_755_V2_2 = 228,
    UC_CPU_PPC32_745_V2_3 = 229,
    UC_CPU_PPC32_755_V2_3 = 230,
    UC_CPU_PPC32_745_V2_4 = 231,
    UC_CPU_PPC32_755_V2_4 = 232,
    UC_CPU_PPC32_745_V2_5 = 233,
    UC_CPU_PPC32_755_V2_5 = 234,
    UC_CPU_PPC32_745_V2_6 = 235,
    UC_CPU_PPC32_755_V2_6 = 236,
    UC_CPU_PPC32_745_V2_7 = 237,
    UC_CPU_PPC32_755_V2_7 = 238,
    UC_CPU_PPC32_745_V2_8 = 239,
    UC_CPU_PPC32_755_V2_8 = 240,
    UC_CPU_PPC32_7400_V1_0 = 241,
    UC_CPU_PPC32_7400_V1_1 = 242,
    UC_CPU_PPC32_7400_V2_0 = 243,
    UC_CPU_PPC32_7400_V2_1 = 244,
    UC_CPU_PPC32_7400_V2_2 = 245,
    UC_CPU_PPC32_7400_V2_6 = 246,
    UC_CPU_PPC32_7400_V2_7 = 247,
    UC_CPU_PPC32_7400_V2_8 = 248,
    UC_CPU_PPC32_7400_V2_9 = 249,
    UC_CPU_PPC32_7410_V1_0 = 250,
    UC_CPU_PPC32_7410_V1_1 = 251,
    UC_CPU_PPC32_7410_V1_2 = 252,
    UC_CPU_PPC32_7410_V1_3 = 253,
    UC_CPU_PPC32_7410_V1_4 = 254,
    UC_CPU_PPC32_7448_V1_0 = 255,
    UC_CPU_PPC32_7448_V1_1 = 256,
    UC_CPU_PPC32_7448_V2_0 = 257,
    UC_CPU_PPC32_7448_V2_1 = 258,
    UC_CPU_PPC32_7450_V1_0 = 259,
    UC_CPU_PPC32_7450_V1_1 = 260,
    UC_CPU_PPC32_7450_V1_2 = 261,
    UC_CPU_PPC32_7450_V2_0 = 262,
    UC_CPU_PPC32_7450_V2_1 = 263,
    UC_CPU_PPC32_7441_V2_1 = 264,
    UC_CPU_PPC32_7441_V2_3 = 265,
    UC_CPU_PPC32_7451_V2_3 = 266,
    UC_CPU_PPC32_7441_V2_10 = 267,
    UC_CPU_PPC32_7451_V2_10 = 268,
    UC_CPU_PPC32_7445_V1_0 = 269,
    UC_CPU_PPC32_7455_V1_0 = 270,
    UC_CPU_PPC32_7445_V2_1 = 271,
    UC_CPU_PPC32_7455_V2_1 = 272,
    UC_CPU_PPC32_7445_V3_2 = 273,
    UC_CPU_PPC32_7455_V3_2 = 274,
    UC_CPU_PPC32_7445_V3_3 = 275,
    UC_CPU_PPC32_7455_V3_3 = 276,
    UC_CPU_PPC32_7445_V3_4 = 277,
    UC_CPU_PPC32_7455_V3_4 = 278,
    UC_CPU_PPC32_7447_V1_0 = 279,
    UC_CPU_PPC32_7457_V1_0 = 280,
    UC_CPU_PPC32_7447_V1_1 = 281,
    UC_CPU_PPC32_7457_V1_1 = 282,
    UC_CPU_PPC32_7457_V1_2 = 283,
    UC_CPU_PPC32_7447A_V1_0 = 284,
    UC_CPU_PPC32_7457A_V1_0 = 285,
    UC_CPU_PPC32_7447A_V1_1 = 286,
    UC_CPU_PPC32_7457A_V1_1 = 287,
    UC_CPU_PPC32_7447A_V1_2 = 288,
    UC_CPU_PPC32_7457A_V1_2 = 289,
    UC_CPU_PPC32_ENDING = 290,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum Ppc64CpuModel {
    E5500 = 0,
    E6500 = 1,
    Model_970_V2_2 = 2,
    Model_970FX_V1_0 = 3,
    Model_970FX_V2_0 = 4,
    Model_970FX_V2_1 = 5,
    Model_970FX_V3_0 = 6,
    Model_970FX_V3_1 = 7,
    Model_970MP_V1_0 = 8,
    Model_970MP_V1_1 = 9,
    POWER5_V2_1 = 10,
    POWER7_V2_3 = 11,
    POWER7_V2_1 = 12,
    POWER8E_V2_1 = 13,
    POWER8_V2_0 = 14,
    POWER8NVL_V1_0 = 15,
    POWER9_V1_0 = 16,
    POWER9_V2_0 = 17,
    POWER10_V1_0 = 18,
    ENDING = 19,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum RegisterPPC {
    INVALID = 0,
    PC = 1,
    R0 = 2,
    R1 = 3,
    R2 = 4,
    R3 = 5,
    R4 = 6,
    R5 = 7,
    R6 = 8,
    R7 = 9,
    R8 = 10,
    R9 = 11,
    R10 = 12,
    R11 = 13,
    R12 = 14,
    R13 = 15,
    R14 = 16,
    R15 = 17,
    R16 = 18,
    R17 = 19,
    R18 = 20,
    R19 = 21,
    R20 = 22,
    R21 = 23,
    R22 = 24,
    R23 = 25,
    R24 = 26,
    R25 = 27,
    R26 = 28,
    R27 = 29,
    R28 = 30,
    R29 = 31,
    R30 = 32,
    R31 = 33,
    CR0 = 34,
    CR1 = 35,
    CR2 = 36,
    CR3 = 37,
    CR4 = 38,
    CR5 = 39,
    CR6 = 40,
    CR7 = 41,
    FPR0 = 42,
    FPR1 = 43,
    FPR2 = 44,
    FPR3 = 45,
    FPR4 = 46,
    FPR5 = 47,
    FPR6 = 48,
    FPR7 = 49,
    FPR8 = 50,
    FPR9 = 51,
    FPR10 = 52,
    FPR11 = 53,
    FPR12 = 54,
    FPR13 = 55,
    FPR14 = 56,
    FPR15 = 57,
    FPR16 = 58,
    FPR17 = 59,
    FPR18 = 60,
    FPR19 = 61,
    FPR20 = 62,
    FPR21 = 63,
    FPR22 = 64,
    FPR23 = 65,
    FPR24 = 66,
    FPR25 = 67,
    FPR26 = 68,
    FPR27 = 69,
    FPR28 = 70,
    FPR29 = 71,
    FPR30 = 72,
    FPR31 = 73,
    LR = 74,
    XER = 75,
    CTR = 76,
    MSR = 77,
    FPSCR = 78,
    CR = 79,
    ENDING = 80,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum Riscv32CpuModel {
    ANY = 0,
    BASE32 = 1,
    SIFIVE_E31 = 2,
    SIFIVE_U34 = 3,
    ENDING = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum Riscv64CpuModel {
    ANY = 0,
    BASE64 = 1,
    SIFIVE_E51 = 2,
    SIFIVE_U54 = 3,
    ENDING = 4,
}
impl RegisterRISCV {
    pub const ZERO: RegisterRISCV = RegisterRISCV::X0;
}
impl RegisterRISCV {
    pub const RA: RegisterRISCV = RegisterRISCV::X1;
}
impl RegisterRISCV {
    pub const SP: RegisterRISCV = RegisterRISCV::X2;
}
impl RegisterRISCV {
    pub const GP: RegisterRISCV = RegisterRISCV::X3;
}
impl RegisterRISCV {
    pub const TP: RegisterRISCV = RegisterRISCV::X4;
}
impl RegisterRISCV {
    pub const T0: RegisterRISCV = RegisterRISCV::X5;
}
impl RegisterRISCV {
    pub const T1: RegisterRISCV = RegisterRISCV::X6;
}
impl RegisterRISCV {
    pub const T2: RegisterRISCV = RegisterRISCV::X7;
}
impl RegisterRISCV {
    pub const S0: RegisterRISCV = RegisterRISCV::X8;
}
impl RegisterRISCV {
    pub const FP: RegisterRISCV = RegisterRISCV::X8;
}
impl RegisterRISCV {
    pub const S1: RegisterRISCV = RegisterRISCV::X9;
}
impl RegisterRISCV {
    pub const A0: RegisterRISCV = RegisterRISCV::X10;
}
impl RegisterRISCV {
    pub const A1: RegisterRISCV = RegisterRISCV::X11;
}
impl RegisterRISCV {
    pub const A2: RegisterRISCV = RegisterRISCV::X12;
}
impl RegisterRISCV {
    pub const A3: RegisterRISCV = RegisterRISCV::X13;
}
impl RegisterRISCV {
    pub const A4: RegisterRISCV = RegisterRISCV::X14;
}
impl RegisterRISCV {
    pub const A5: RegisterRISCV = RegisterRISCV::X15;
}
impl RegisterRISCV {
    pub const A6: RegisterRISCV = RegisterRISCV::X16;
}
impl RegisterRISCV {
    pub const A7: RegisterRISCV = RegisterRISCV::X17;
}
impl RegisterRISCV {
    pub const S2: RegisterRISCV = RegisterRISCV::X18;
}
impl RegisterRISCV {
    pub const S3: RegisterRISCV = RegisterRISCV::X19;
}
impl RegisterRISCV {
    pub const S4: RegisterRISCV = RegisterRISCV::X20;
}
impl RegisterRISCV {
    pub const S5: RegisterRISCV = RegisterRISCV::X21;
}
impl RegisterRISCV {
    pub const S6: RegisterRISCV = RegisterRISCV::X22;
}
impl RegisterRISCV {
    pub const S7: RegisterRISCV = RegisterRISCV::X23;
}
impl RegisterRISCV {
    pub const S8: RegisterRISCV = RegisterRISCV::X24;
}
impl RegisterRISCV {
    pub const S9: RegisterRISCV = RegisterRISCV::X25;
}
impl RegisterRISCV {
    pub const S10: RegisterRISCV = RegisterRISCV::X26;
}
impl RegisterRISCV {
    pub const S11: RegisterRISCV = RegisterRISCV::X27;
}
impl RegisterRISCV {
    pub const T3: RegisterRISCV = RegisterRISCV::X28;
}
impl RegisterRISCV {
    pub const T4: RegisterRISCV = RegisterRISCV::X29;
}
impl RegisterRISCV {
    pub const T5: RegisterRISCV = RegisterRISCV::X30;
}
impl RegisterRISCV {
    pub const T6: RegisterRISCV = RegisterRISCV::X31;
}
impl RegisterRISCV {
    pub const FT0: RegisterRISCV = RegisterRISCV::F0;
}
impl RegisterRISCV {
    pub const FT1: RegisterRISCV = RegisterRISCV::F1;
}
impl RegisterRISCV {
    pub const FT2: RegisterRISCV = RegisterRISCV::F2;
}
impl RegisterRISCV {
    pub const FT3: RegisterRISCV = RegisterRISCV::F3;
}
impl RegisterRISCV {
    pub const FT4: RegisterRISCV = RegisterRISCV::F4;
}
impl RegisterRISCV {
    pub const FT5: RegisterRISCV = RegisterRISCV::F5;
}
impl RegisterRISCV {
    pub const FT6: RegisterRISCV = RegisterRISCV::F6;
}
impl RegisterRISCV {
    pub const FT7: RegisterRISCV = RegisterRISCV::F7;
}
impl RegisterRISCV {
    pub const FS0: RegisterRISCV = RegisterRISCV::F8;
}
impl RegisterRISCV {
    pub const FS1: RegisterRISCV = RegisterRISCV::F9;
}
impl RegisterRISCV {
    pub const FA0: RegisterRISCV = RegisterRISCV::F10;
}
impl RegisterRISCV {
    pub const FA1: RegisterRISCV = RegisterRISCV::F11;
}
impl RegisterRISCV {
    pub const FA2: RegisterRISCV = RegisterRISCV::F12;
}
impl RegisterRISCV {
    pub const FA3: RegisterRISCV = RegisterRISCV::F13;
}
impl RegisterRISCV {
    pub const FA4: RegisterRISCV = RegisterRISCV::F14;
}
impl RegisterRISCV {
    pub const FA5: RegisterRISCV = RegisterRISCV::F15;
}
impl RegisterRISCV {
    pub const FA6: RegisterRISCV = RegisterRISCV::F16;
}
impl RegisterRISCV {
    pub const FA7: RegisterRISCV = RegisterRISCV::F17;
}
impl RegisterRISCV {
    pub const FS2: RegisterRISCV = RegisterRISCV::F18;
}
impl RegisterRISCV {
    pub const FS3: RegisterRISCV = RegisterRISCV::F19;
}
impl RegisterRISCV {
    pub const FS4: RegisterRISCV = RegisterRISCV::F20;
}
impl RegisterRISCV {
    pub const FS5: RegisterRISCV = RegisterRISCV::F21;
}
impl RegisterRISCV {
    pub const FS6: RegisterRISCV = RegisterRISCV::F22;
}
impl RegisterRISCV {
    pub const FS7: RegisterRISCV = RegisterRISCV::F23;
}
impl RegisterRISCV {
    pub const FS8: RegisterRISCV = RegisterRISCV::F24;
}
impl RegisterRISCV {
    pub const FS9: RegisterRISCV = RegisterRISCV::F25;
}
impl RegisterRISCV {
    pub const FS10: RegisterRISCV = RegisterRISCV::F26;
}
impl RegisterRISCV {
    pub const FS11: RegisterRISCV = RegisterRISCV::F27;
}
impl RegisterRISCV {
    pub const FT8: RegisterRISCV = RegisterRISCV::F28;
}
impl RegisterRISCV {
    pub const FT9: RegisterRISCV = RegisterRISCV::F29;
}
impl RegisterRISCV {
    pub const FT10: RegisterRISCV = RegisterRISCV::F30;
}
impl RegisterRISCV {
    pub const FT11: RegisterRISCV = RegisterRISCV::F31;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum RegisterRISCV {
    INVALID = 0,
    X0 = 1,
    X1 = 2,
    X2 = 3,
    X3 = 4,
    X4 = 5,
    X5 = 6,
    X6 = 7,
    X7 = 8,
    X8 = 9,
    X9 = 10,
    X10 = 11,
    X11 = 12,
    X12 = 13,
    X13 = 14,
    X14 = 15,
    X15 = 16,
    X16 = 17,
    X17 = 18,
    X18 = 19,
    X19 = 20,
    X20 = 21,
    X21 = 22,
    X22 = 23,
    X23 = 24,
    X24 = 25,
    X25 = 26,
    X26 = 27,
    X27 = 28,
    X28 = 29,
    X29 = 30,
    X30 = 31,
    X31 = 32,
    USTATUS = 33,
    UIE = 34,
    UTVEC = 35,
    USCRATCH = 36,
    UEPC = 37,
    UCAUSE = 38,
    UTVAL = 39,
    UIP = 40,
    FFLAGS = 41,
    FRM = 42,
    FCSR = 43,
    CYCLE = 44,
    TIME = 45,
    INSTRET = 46,
    HPMCOUNTER3 = 47,
    HPMCOUNTER4 = 48,
    HPMCOUNTER5 = 49,
    HPMCOUNTER6 = 50,
    HPMCOUNTER7 = 51,
    HPMCOUNTER8 = 52,
    HPMCOUNTER9 = 53,
    HPMCOUNTER10 = 54,
    HPMCOUNTER11 = 55,
    HPMCOUNTER12 = 56,
    HPMCOUNTER13 = 57,
    HPMCOUNTER14 = 58,
    HPMCOUNTER15 = 59,
    HPMCOUNTER16 = 60,
    HPMCOUNTER17 = 61,
    HPMCOUNTER18 = 62,
    HPMCOUNTER19 = 63,
    HPMCOUNTER20 = 64,
    HPMCOUNTER21 = 65,
    HPMCOUNTER22 = 66,
    HPMCOUNTER23 = 67,
    HPMCOUNTER24 = 68,
    HPMCOUNTER25 = 69,
    HPMCOUNTER26 = 70,
    HPMCOUNTER27 = 71,
    HPMCOUNTER28 = 72,
    HPMCOUNTER29 = 73,
    HPMCOUNTER30 = 74,
    HPMCOUNTER31 = 75,
    CYCLEH = 76,
    TIMEH = 77,
    INSTRETH = 78,
    HPMCOUNTER3H = 79,
    HPMCOUNTER4H = 80,
    HPMCOUNTER5H = 81,
    HPMCOUNTER6H = 82,
    HPMCOUNTER7H = 83,
    HPMCOUNTER8H = 84,
    HPMCOUNTER9H = 85,
    HPMCOUNTER10H = 86,
    HPMCOUNTER11H = 87,
    HPMCOUNTER12H = 88,
    HPMCOUNTER13H = 89,
    HPMCOUNTER14H = 90,
    HPMCOUNTER15H = 91,
    HPMCOUNTER16H = 92,
    HPMCOUNTER17H = 93,
    HPMCOUNTER18H = 94,
    HPMCOUNTER19H = 95,
    HPMCOUNTER20H = 96,
    HPMCOUNTER21H = 97,
    HPMCOUNTER22H = 98,
    HPMCOUNTER23H = 99,
    HPMCOUNTER24H = 100,
    HPMCOUNTER25H = 101,
    HPMCOUNTER26H = 102,
    HPMCOUNTER27H = 103,
    HPMCOUNTER28H = 104,
    HPMCOUNTER29H = 105,
    HPMCOUNTER30H = 106,
    HPMCOUNTER31H = 107,
    MCYCLE = 108,
    MINSTRET = 109,
    MCYCLEH = 110,
    MINSTRETH = 111,
    MVENDORID = 112,
    MARCHID = 113,
    MIMPID = 114,
    MHARTID = 115,
    MSTATUS = 116,
    MISA = 117,
    MEDELEG = 118,
    MIDELEG = 119,
    MIE = 120,
    MTVEC = 121,
    MCOUNTEREN = 122,
    MSTATUSH = 123,
    MUCOUNTEREN = 124,
    MSCOUNTEREN = 125,
    MHCOUNTEREN = 126,
    MSCRATCH = 127,
    MEPC = 128,
    MCAUSE = 129,
    MTVAL = 130,
    MIP = 131,
    MBADADDR = 132,
    SSTATUS = 133,
    SEDELEG = 134,
    SIDELEG = 135,
    SIE = 136,
    STVEC = 137,
    SCOUNTEREN = 138,
    SSCRATCH = 139,
    SEPC = 140,
    SCAUSE = 141,
    STVAL = 142,
    SIP = 143,
    SBADADDR = 144,
    SPTBR = 145,
    SATP = 146,
    HSTATUS = 147,
    HEDELEG = 148,
    HIDELEG = 149,
    HIE = 150,
    HCOUNTEREN = 151,
    HTVAL = 152,
    HIP = 153,
    HTINST = 154,
    HGATP = 155,
    HTIMEDELTA = 156,
    HTIMEDELTAH = 157,
    F0 = 158,
    F1 = 159,
    F2 = 160,
    F3 = 161,
    F4 = 162,
    F5 = 163,
    F6 = 164,
    F7 = 165,
    F8 = 166,
    F9 = 167,
    F10 = 168,
    F11 = 169,
    F12 = 170,
    F13 = 171,
    F14 = 172,
    F15 = 173,
    F16 = 174,
    F17 = 175,
    F18 = 176,
    F19 = 177,
    F20 = 178,
    F21 = 179,
    F22 = 180,
    F23 = 181,
    F24 = 182,
    F25 = 183,
    F26 = 184,
    F27 = 185,
    F28 = 186,
    F29 = 187,
    F30 = 188,
    F31 = 189,
    PC = 190,
    PRIV = 191,
    ENDING = 192,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum S390xCpuModel {
    Z900 = 0,
    Z900_2 = 1,
    Z900_3 = 2,
    Z800 = 3,
    Z990 = 4,
    Z990_2 = 5,
    Z990_3 = 6,
    Z890 = 7,
    Z990_4 = 8,
    Z890_2 = 9,
    Z990_5 = 10,
    Z890_3 = 11,
    Z9EC = 12,
    Z9EC_2 = 13,
    Z9BC = 14,
    Z9EC_3 = 15,
    Z9BC_2 = 16,
    Z10EC = 17,
    Z10EC_2 = 18,
    Z10BC = 19,
    Z10EC_3 = 20,
    Z10BC_2 = 21,
    Z196 = 22,
    Z196_2 = 23,
    Z114 = 24,
    ZEC12 = 25,
    ZEC12_2 = 26,
    ZBC12 = 27,
    Z13 = 28,
    Z13_2 = 29,
    Z13S = 30,
    Z14 = 31,
    Z14_2 = 32,
    Z14ZR1 = 33,
    GEN15A = 34,
    GEN15B = 35,
    QEMU = 36,
    MAX = 37,
    ENDING = 38,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum RegisterS390X {
    INVALID = 0,
    R0 = 1,
    R1 = 2,
    R2 = 3,
    R3 = 4,
    R4 = 5,
    R5 = 6,
    R6 = 7,
    R7 = 8,
    R8 = 9,
    R9 = 10,
    R10 = 11,
    R11 = 12,
    R12 = 13,
    R13 = 14,
    R14 = 15,
    R15 = 16,
    F0 = 17,
    F1 = 18,
    F2 = 19,
    F3 = 20,
    F4 = 21,
    F5 = 22,
    F6 = 23,
    F7 = 24,
    F8 = 25,
    F9 = 26,
    F10 = 27,
    F11 = 28,
    F12 = 29,
    F13 = 30,
    F14 = 31,
    F15 = 32,
    F16 = 33,
    F17 = 34,
    F18 = 35,
    F19 = 36,
    F20 = 37,
    F21 = 38,
    F22 = 39,
    F23 = 40,
    F24 = 41,
    F25 = 42,
    F26 = 43,
    F27 = 44,
    F28 = 45,
    F29 = 46,
    F30 = 47,
    F31 = 48,
    A0 = 49,
    A1 = 50,
    A2 = 51,
    A3 = 52,
    A4 = 53,
    A5 = 54,
    A6 = 55,
    A7 = 56,
    A8 = 57,
    A9 = 58,
    A10 = 59,
    A11 = 60,
    A12 = 61,
    A13 = 62,
    A14 = 63,
    A15 = 64,
    PC = 65,
    PSWM = 66,
    ENDING = 67,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum TricoreCpuModel {
    TC1796 = 0,
    TC1797 = 1,
    TC27X = 2,
    ENDING = 3,
}
impl RegisterTRICORE {
    pub const GA0: RegisterTRICORE = RegisterTRICORE::A0;
}
impl RegisterTRICORE {
    pub const GA1: RegisterTRICORE = RegisterTRICORE::A1;
}
impl RegisterTRICORE {
    pub const GA8: RegisterTRICORE = RegisterTRICORE::A8;
}
impl RegisterTRICORE {
    pub const GA9: RegisterTRICORE = RegisterTRICORE::A9;
}
impl RegisterTRICORE {
    pub const SP: RegisterTRICORE = RegisterTRICORE::A10;
}
impl RegisterTRICORE {
    pub const LR: RegisterTRICORE = RegisterTRICORE::A11;
}
impl RegisterTRICORE {
    pub const IA: RegisterTRICORE = RegisterTRICORE::A15;
}
impl RegisterTRICORE {
    pub const ID: RegisterTRICORE = RegisterTRICORE::D15;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum RegisterTRICORE {
    INVALID = 0,
    A0 = 1,
    A1 = 2,
    A2 = 3,
    A3 = 4,
    A4 = 5,
    A5 = 6,
    A6 = 7,
    A7 = 8,
    A8 = 9,
    A9 = 10,
    A10 = 11,
    A11 = 12,
    A12 = 13,
    A13 = 14,
    A14 = 15,
    A15 = 16,
    D0 = 17,
    D1 = 18,
    D2 = 19,
    D3 = 20,
    D4 = 21,
    D5 = 22,
    D6 = 23,
    D7 = 24,
    D8 = 25,
    D9 = 26,
    D10 = 27,
    D11 = 28,
    D12 = 29,
    D13 = 30,
    D14 = 31,
    D15 = 32,
    PCXI = 33,
    PSW = 34,
    PSW_USB_C = 35,
    PSW_USB_V = 36,
    PSW_USB_SV = 37,
    PSW_USB_AV = 38,
    PSW_USB_SAV = 39,
    PC = 40,
    SYSCON = 41,
    CPU_ID = 42,
    BIV = 43,
    BTV = 44,
    ISP = 45,
    ICR = 46,
    FCX = 47,
    LCX = 48,
    COMPAT = 49,
    DPR0_U = 50,
    DPR1_U = 51,
    DPR2_U = 52,
    DPR3_U = 53,
    DPR0_L = 54,
    DPR1_L = 55,
    DPR2_L = 56,
    DPR3_L = 57,
    CPR0_U = 58,
    CPR1_U = 59,
    CPR2_U = 60,
    CPR3_U = 61,
    CPR0_L = 62,
    CPR1_L = 63,
    CPR2_L = 64,
    CPR3_L = 65,
    DPM0 = 66,
    DPM1 = 67,
    DPM2 = 68,
    DPM3 = 69,
    CPM0 = 70,
    CPM1 = 71,
    CPM2 = 72,
    CPM3 = 73,
    MMU_CON = 74,
    MMU_ASI = 75,
    MMU_TVA = 76,
    MMU_TPA = 77,
    MMU_TPX = 78,
    MMU_TFA = 79,
    BMACON = 80,
    SMACON = 81,
    DIEAR = 82,
    DIETR = 83,
    CCDIER = 84,
    MIECON = 85,
    PIEAR = 86,
    PIETR = 87,
    CCPIER = 88,
    DBGSR = 89,
    EXEVT = 90,
    CREVT = 91,
    SWEVT = 92,
    TR0EVT = 93,
    TR1EVT = 94,
    DMS = 95,
    DCX = 96,
    DBGTCR = 97,
    CCTRL = 98,
    CCNT = 99,
    ICNT = 100,
    M1CNT = 101,
    M2CNT = 102,
    M3CNT = 103,
    ENDING = 104,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum Arch {
    ARM = 1,
    ARM64 = 2,
    MIPS = 3,
    X86 = 4,
    PPC = 5,
    SPARC = 6,
    M68K = 7,
    RISCV = 8,
    S390X = 9,
    TRICORE = 10,
    MAX = 11,
}
impl Mode {
    pub const LITTLE_ENDIAN: Mode = Mode(0);
}
impl Mode {
    pub const BIG_ENDIAN: Mode = Mode(1073741824);
}
impl Mode {
    pub const ARM: Mode = Mode(0);
}
impl Mode {
    pub const THUMB: Mode = Mode(16);
}
impl Mode {
    pub const MCLASS: Mode = Mode(32);
}
impl Mode {
    pub const V8: Mode = Mode(64);
}
impl Mode {
    pub const ARMBE8: Mode = Mode(1024);
}
impl Mode {
    pub const ARM926: Mode = Mode(128);
}
impl Mode {
    pub const ARM946: Mode = Mode(256);
}
impl Mode {
    pub const ARM1176: Mode = Mode(512);
}
impl Mode {
    pub const MICRO: Mode = Mode(16);
}
impl Mode {
    pub const MIPS3: Mode = Mode(32);
}
impl Mode {
    pub const MIPS32R6: Mode = Mode(64);
}
impl Mode {
    pub const MIPS32: Mode = Mode(4);
}
impl Mode {
    pub const MIPS64: Mode = Mode(8);
}
impl Mode {
    pub const MODE_16: Mode = Mode(2);
}
impl Mode {
    pub const MODE_32: Mode = Mode(4);
}
impl Mode {
    pub const MODE_64: Mode = Mode(8);
}
impl Mode {
    pub const PPC32: Mode = Mode(4);
}
impl Mode {
    pub const PPC64: Mode = Mode(8);
}
impl Mode {
    pub const QPX: Mode = Mode(16);
}
impl Mode {
    pub const SPARC32: Mode = Mode(4);
}
impl Mode {
    pub const SPARC64: Mode = Mode(8);
}
impl Mode {
    pub const V9: Mode = Mode(16);
}
impl Mode {
    pub const RISCV32: Mode = Mode(4);
}
impl Mode {
    pub const RISCV64: Mode = Mode(8);
}
impl ::core::ops::BitOr<Mode> for Mode {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        Mode(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for Mode {
    #[inline]
    fn bitor_assign(&mut self, rhs: Mode) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<Mode> for Mode {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        Mode(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for Mode {
    #[inline]
    fn bitand_assign(&mut self, rhs: Mode) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct Mode(pub ::core::ffi::c_uint);
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum uc_error {
    OK = 0,
    NOMEM = 1,
    ARCH = 2,
    HANDLE = 3,
    MODE = 4,
    VERSION = 5,
    READ_UNMAPPED = 6,
    WRITE_UNMAPPED = 7,
    FETCH_UNMAPPED = 8,
    HOOK = 9,
    INSN_INVALID = 10,
    MAP = 11,
    WRITE_PROT = 12,
    READ_PROT = 13,
    FETCH_PROT = 14,
    ARG = 15,
    READ_UNALIGNED = 16,
    WRITE_UNALIGNED = 17,
    FETCH_UNALIGNED = 18,
    HOOK_EXIST = 19,
    RESOURCE = 20,
    EXCEPTION = 21,
    OVERFLOW = 22,
}
pub type uc_cb_hookcode_t = ::core::option::Option<
    unsafe extern "C" fn(
        uc: *mut uc_engine,
        address: u64,
        size: u32,
        user_data: *mut ::core::ffi::c_void,
    ),
>;
pub type uc_cb_hookintr_t = ::core::option::Option<
    unsafe extern "C" fn(uc: *mut uc_engine, intno: u32, user_data: *mut ::core::ffi::c_void),
>;
pub type uc_cb_hookinsn_invalid_t = ::core::option::Option<
    unsafe extern "C" fn(uc: *mut uc_engine, user_data: *mut ::core::ffi::c_void) -> bool,
>;
pub type uc_cb_insn_in_t = ::core::option::Option<
    unsafe extern "C" fn(
        uc: *mut uc_engine,
        port: u32,
        size: ::core::ffi::c_int,
        user_data: *mut ::core::ffi::c_void,
    ) -> u32,
>;
pub type uc_cb_insn_out_t = ::core::option::Option<
    unsafe extern "C" fn(
        uc: *mut uc_engine,
        port: u32,
        size: ::core::ffi::c_int,
        value: u32,
        user_data: *mut ::core::ffi::c_void,
    ),
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum MemType {
    READ = 16,
    WRITE = 17,
    FETCH = 18,
    READ_UNMAPPED = 19,
    WRITE_UNMAPPED = 20,
    FETCH_UNMAPPED = 21,
    WRITE_PROT = 22,
    READ_PROT = 23,
    FETCH_PROT = 24,
    READ_AFTER = 25,
}
pub type uc_cb_tlbevent_t = ::core::option::Option<
    unsafe extern "C" fn(
        uc: *mut uc_engine,
        vaddr: u64,
        type_: MemType,
        result: *mut TlbEntry,
        user_data: *mut ::core::ffi::c_void,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct TranslationBlock {
    pub pc: u64,
    pub icount: u16,
    pub size: u16,
}
pub type uc_hook_edge_gen_t = ::core::option::Option<
    unsafe extern "C" fn(
        uc: *mut uc_engine,
        cur_tb: *mut TranslationBlock,
        prev_tb: *mut TranslationBlock,
        user_data: *mut ::core::ffi::c_void,
    ),
>;
pub type uc_hook_tcg_op_2 = ::core::option::Option<
    unsafe extern "C" fn(
        uc: *mut uc_engine,
        address: u64,
        arg1: u64,
        arg2: u64,
        size: u32,
        user_data: *mut ::core::ffi::c_void,
    ),
>;
pub type uc_hook_tcg_sub_t = uc_hook_tcg_op_2;
pub type uc_cb_mmio_read_t = ::core::option::Option<
    unsafe extern "C" fn(
        uc: *mut uc_engine,
        offset: u64,
        size: ::core::ffi::c_uint,
        user_data: *mut ::core::ffi::c_void,
    ) -> u64,
>;
pub type uc_cb_mmio_write_t = ::core::option::Option<
    unsafe extern "C" fn(
        uc: *mut uc_engine,
        offset: u64,
        size: ::core::ffi::c_uint,
        value: u64,
        user_data: *mut ::core::ffi::c_void,
    ),
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum TcgOpCode {
    SUB = 0,
}
impl TcgOpFlag {
    pub const CMP: TcgOpFlag = TcgOpFlag(1);
}
impl TcgOpFlag {
    pub const DIRECT: TcgOpFlag = TcgOpFlag(2);
}
impl ::core::ops::BitOr<TcgOpFlag> for TcgOpFlag {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        TcgOpFlag(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for TcgOpFlag {
    #[inline]
    fn bitor_assign(&mut self, rhs: TcgOpFlag) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<TcgOpFlag> for TcgOpFlag {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        TcgOpFlag(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for TcgOpFlag {
    #[inline]
    fn bitand_assign(&mut self, rhs: TcgOpFlag) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct TcgOpFlag(pub ::core::ffi::c_uint);
impl HookType {
    pub const INTR: HookType = HookType(1);
}
impl HookType {
    pub const INSN: HookType = HookType(2);
}
impl HookType {
    pub const CODE: HookType = HookType(4);
}
impl HookType {
    pub const BLOCK: HookType = HookType(8);
}
impl HookType {
    pub const MEM_READ_UNMAPPED: HookType = HookType(16);
}
impl HookType {
    pub const MEM_WRITE_UNMAPPED: HookType = HookType(32);
}
impl HookType {
    pub const MEM_FETCH_UNMAPPED: HookType = HookType(64);
}
impl HookType {
    pub const MEM_READ_PROT: HookType = HookType(128);
}
impl HookType {
    pub const MEM_WRITE_PROT: HookType = HookType(256);
}
impl HookType {
    pub const MEM_FETCH_PROT: HookType = HookType(512);
}
impl HookType {
    pub const MEM_READ: HookType = HookType(1024);
}
impl HookType {
    pub const MEM_WRITE: HookType = HookType(2048);
}
impl HookType {
    pub const MEM_FETCH: HookType = HookType(4096);
}
impl HookType {
    pub const MEM_READ_AFTER: HookType = HookType(8192);
}
impl HookType {
    pub const INSN_INVALID: HookType = HookType(16384);
}
impl HookType {
    pub const EDGE_GENERATED: HookType = HookType(32768);
}
impl HookType {
    pub const TCG_OPCODE: HookType = HookType(65536);
}
impl HookType {
    pub const TLB_FILL: HookType = HookType(131072);
}
impl ::core::ops::BitOr<HookType> for HookType {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        HookType(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for HookType {
    #[inline]
    fn bitor_assign(&mut self, rhs: HookType) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<HookType> for HookType {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        HookType(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for HookType {
    #[inline]
    fn bitand_assign(&mut self, rhs: HookType) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct HookType(pub ::core::ffi::c_uint);
pub type uc_cb_hookmem_t = ::core::option::Option<
    unsafe extern "C" fn(
        uc: *mut uc_engine,
        type_: MemType,
        address: u64,
        size: ::core::ffi::c_int,
        value: i64,
        user_data: *mut ::core::ffi::c_void,
    ),
>;
pub type uc_cb_eventmem_t = ::core::option::Option<
    unsafe extern "C" fn(
        uc: *mut uc_engine,
        type_: MemType,
        address: u64,
        size: ::core::ffi::c_int,
        value: i64,
        user_data: *mut ::core::ffi::c_void,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct MemRegion {
    pub begin: u64,
    pub end: u64,
    pub perms: u32,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum Query {
    MODE = 1,
    PAGE_SIZE = 2,
    ARCH = 3,
    TIMEOUT = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum TlbType {
    CPU = 0,
    VIRTUAL = 1,
}
impl ControlType {
    pub const UC_MODE: ControlType = ControlType(0);
}
impl ControlType {
    pub const UC_PAGE_SIZE: ControlType = ControlType(1);
}
impl ControlType {
    pub const UC_ARCH: ControlType = ControlType(2);
}
impl ControlType {
    pub const UC_TIMEOUT: ControlType = ControlType(3);
}
impl ControlType {
    pub const UC_USE_EXITS: ControlType = ControlType(4);
}
impl ControlType {
    pub const UC_EXITS_CNT: ControlType = ControlType(5);
}
impl ControlType {
    pub const UC_EXITS: ControlType = ControlType(6);
}
impl ControlType {
    pub const CPU_MODEL: ControlType = ControlType(7);
}
impl ControlType {
    pub const TB_REQUEST_CACHE: ControlType = ControlType(8);
}
impl ControlType {
    pub const TB_REMOVE_CACHE: ControlType = ControlType(9);
}
impl ControlType {
    pub const TB_FLUSH: ControlType = ControlType(10);
}
impl ControlType {
    pub const TLB_FLUSH: ControlType = ControlType(11);
}
impl ControlType {
    pub const TLB_TYPE: ControlType = ControlType(12);
}
impl ControlType {
    pub const TCG_BUFFER_SIZE: ControlType = ControlType(13);
}
impl ControlType {
    pub const CONTEXT_MODE: ControlType = ControlType(14);
}
impl ::core::ops::BitOr<ControlType> for ControlType {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        ControlType(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for ControlType {
    #[inline]
    fn bitor_assign(&mut self, rhs: ControlType) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<ControlType> for ControlType {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        ControlType(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for ControlType {
    #[inline]
    fn bitand_assign(&mut self, rhs: ControlType) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ControlType(pub ::core::ffi::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uc_context {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn uc_version(
        major: *mut ::core::ffi::c_uint,
        minor: *mut ::core::ffi::c_uint,
    ) -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn uc_arch_supported(arch: Arch) -> bool;
}
unsafe extern "C" {
    pub fn uc_open(arch: Arch, mode: Mode, uc: *mut *mut uc_engine) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_close(uc: *mut uc_engine) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_query(uc: *mut uc_engine, type_: Query, result: *mut usize) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_ctl(uc: *mut uc_engine, control: ControlType, ...) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_errno(uc: *mut uc_engine) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_strerror(code: uc_error) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn uc_reg_write(
        uc: *mut uc_engine,
        regid: ::core::ffi::c_int,
        value: *const ::core::ffi::c_void,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_reg_read(
        uc: *mut uc_engine,
        regid: ::core::ffi::c_int,
        value: *mut ::core::ffi::c_void,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_reg_write2(
        uc: *mut uc_engine,
        regid: ::core::ffi::c_int,
        value: *const ::core::ffi::c_void,
        size: *mut usize,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_reg_read2(
        uc: *mut uc_engine,
        regid: ::core::ffi::c_int,
        value: *mut ::core::ffi::c_void,
        size: *mut usize,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_reg_write_batch(
        uc: *mut uc_engine,
        regs: *mut ::core::ffi::c_int,
        vals: *const *mut ::core::ffi::c_void,
        count: ::core::ffi::c_int,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_reg_read_batch(
        uc: *mut uc_engine,
        regs: *mut ::core::ffi::c_int,
        vals: *mut *mut ::core::ffi::c_void,
        count: ::core::ffi::c_int,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_reg_write_batch2(
        uc: *mut uc_engine,
        regs: *mut ::core::ffi::c_int,
        vals: *const *const ::core::ffi::c_void,
        sizes: *mut usize,
        count: ::core::ffi::c_int,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_reg_read_batch2(
        uc: *mut uc_engine,
        regs: *mut ::core::ffi::c_int,
        vals: *const *mut ::core::ffi::c_void,
        sizes: *mut usize,
        count: ::core::ffi::c_int,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_mem_write(
        uc: *mut uc_engine,
        address: u64,
        bytes: *const ::core::ffi::c_void,
        size: usize,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_mem_read(
        uc: *mut uc_engine,
        address: u64,
        bytes: *mut ::core::ffi::c_void,
        size: usize,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_emu_start(
        uc: *mut uc_engine,
        begin: u64,
        until: u64,
        timeout: u64,
        count: usize,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_emu_stop(uc: *mut uc_engine) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_hook_add(
        uc: *mut uc_engine,
        hh: *mut uc_hook,
        type_: ::core::ffi::c_int,
        callback: *mut ::core::ffi::c_void,
        user_data: *mut ::core::ffi::c_void,
        begin: u64,
        end: u64,
        ...
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_hook_del(uc: *mut uc_engine, hh: uc_hook) -> uc_error;
}
impl Prot {
    pub const NONE: Prot = Prot(0);
}
impl Prot {
    pub const READ: Prot = Prot(1);
}
impl Prot {
    pub const WRITE: Prot = Prot(2);
}
impl Prot {
    pub const EXEC: Prot = Prot(4);
}
impl Prot {
    pub const ALL: Prot = Prot(7);
}
impl ::core::ops::BitOr<Prot> for Prot {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        Prot(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for Prot {
    #[inline]
    fn bitor_assign(&mut self, rhs: Prot) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<Prot> for Prot {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        Prot(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for Prot {
    #[inline]
    fn bitand_assign(&mut self, rhs: Prot) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct Prot(pub ::core::ffi::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]
pub struct TlbEntry {
    pub paddr: u64,
    pub perms: Prot,
}
impl ContextMode {
    pub const CPU: ContextMode = ContextMode(1);
}
impl ContextMode {
    pub const MEMORY: ContextMode = ContextMode(2);
}
impl ::core::ops::BitOr<ContextMode> for ContextMode {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        ContextMode(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for ContextMode {
    #[inline]
    fn bitor_assign(&mut self, rhs: ContextMode) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<ContextMode> for ContextMode {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        ContextMode(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for ContextMode {
    #[inline]
    fn bitand_assign(&mut self, rhs: ContextMode) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct ContextMode(pub ::core::ffi::c_uint);
unsafe extern "C" {
    pub fn uc_mem_map(uc: *mut uc_engine, address: u64, size: usize, perms: u32) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_mem_map_ptr(
        uc: *mut uc_engine,
        address: u64,
        size: usize,
        perms: u32,
        ptr: *mut ::core::ffi::c_void,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_mmio_map(
        uc: *mut uc_engine,
        address: u64,
        size: usize,
        read_cb: uc_cb_mmio_read_t,
        user_data_read: *mut ::core::ffi::c_void,
        write_cb: uc_cb_mmio_write_t,
        user_data_write: *mut ::core::ffi::c_void,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_mem_unmap(uc: *mut uc_engine, address: u64, size: usize) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_mem_protect(uc: *mut uc_engine, address: u64, size: usize, perms: u32) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_mem_regions(
        uc: *mut uc_engine,
        regions: *mut *mut MemRegion,
        count: *mut u32,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_context_alloc(uc: *mut uc_engine, context: *mut *mut uc_context) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_free(mem: *mut ::core::ffi::c_void) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_context_save(uc: *mut uc_engine, context: *mut uc_context) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_context_reg_write(
        ctx: *mut uc_context,
        regid: ::core::ffi::c_int,
        value: *const ::core::ffi::c_void,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_context_reg_read(
        ctx: *mut uc_context,
        regid: ::core::ffi::c_int,
        value: *mut ::core::ffi::c_void,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_context_reg_write2(
        ctx: *mut uc_context,
        regid: ::core::ffi::c_int,
        value: *const ::core::ffi::c_void,
        size: *mut usize,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_context_reg_read2(
        ctx: *mut uc_context,
        regid: ::core::ffi::c_int,
        value: *mut ::core::ffi::c_void,
        size: *mut usize,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_context_reg_write_batch(
        ctx: *mut uc_context,
        regs: *mut ::core::ffi::c_int,
        vals: *const *mut ::core::ffi::c_void,
        count: ::core::ffi::c_int,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_context_reg_read_batch(
        ctx: *mut uc_context,
        regs: *mut ::core::ffi::c_int,
        vals: *mut *mut ::core::ffi::c_void,
        count: ::core::ffi::c_int,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_context_reg_write_batch2(
        ctx: *mut uc_context,
        regs: *mut ::core::ffi::c_int,
        vals: *const *const ::core::ffi::c_void,
        sizes: *mut usize,
        count: ::core::ffi::c_int,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_context_reg_read_batch2(
        ctx: *mut uc_context,
        regs: *mut ::core::ffi::c_int,
        vals: *const *mut ::core::ffi::c_void,
        sizes: *mut usize,
        count: ::core::ffi::c_int,
    ) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_context_restore(uc: *mut uc_engine, context: *mut uc_context) -> uc_error;
}
unsafe extern "C" {
    pub fn uc_context_size(uc: *mut uc_engine) -> usize;
}
unsafe extern "C" {
    pub fn uc_context_free(context: *mut uc_context) -> uc_error;
}
